//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoomsManagement.Database.ORM
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class LoomsManagementEntities : DbContext
    {
        public LoomsManagementEntities()
            : base("name=LoomsManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tblAttendanceMST> tblAttendanceMSTs { get; set; }
        public DbSet<tblBankMST> tblBankMSTs { get; set; }
        public DbSet<tblBeamMST> tblBeamMSTs { get; set; }
        public DbSet<tblBeemProcess> tblBeemProcesses { get; set; }
        public DbSet<tblBemProcessDetail> tblBemProcessDetails { get; set; }
        public DbSet<tblBoilerProcess> tblBoilerProcesses { get; set; }
        public DbSet<tblBolierProcessDetail> tblBolierProcessDetails { get; set; }
        public DbSet<tblBranchMST> tblBranchMSTs { get; set; }
        public DbSet<tblBrokersMST> tblBrokersMSTs { get; set; }
        public DbSet<tblCompany> tblCompanies { get; set; }
        public DbSet<tblCompanyMachineMST> tblCompanyMachineMSTs { get; set; }
        public DbSet<tblEmployee> tblEmployees { get; set; }
        public DbSet<tblEmployeeTypeMST> tblEmployeeTypeMSTs { get; set; }
        public DbSet<tblLoomProcess> tblLoomProcesses { get; set; }
        public DbSet<tblLoomProcessWork> tblLoomProcessWorks { get; set; }
        public DbSet<tblMachineMST> tblMachineMSTs { get; set; }
        public DbSet<tblMachineTypeMST> tblMachineTypeMSTs { get; set; }
        public DbSet<tblMandingProcess> tblMandingProcesses { get; set; }
        public DbSet<tblMendingDetailsProcess> tblMendingDetailsProcesses { get; set; }
        public DbSet<tblMendingPenulty> tblMendingPenulties { get; set; }
        public DbSet<tblPartysMST> tblPartysMSTs { get; set; }
        public DbSet<tblPenaltyMST> tblPenaltyMSTs { get; set; }
        public DbSet<tblProductQualityMST> tblProductQualityMSTs { get; set; }
        public DbSet<tblSalaryMST> tblSalaryMSTs { get; set; }
        public DbSet<tblTFOProcess> tblTFOProcesses { get; set; }
        public DbSet<tblWindingWork> tblWindingWorks { get; set; }
        public DbSet<tblWithdrownMST> tblWithdrownMSTs { get; set; }
        public DbSet<tblWorkingYear> tblWorkingYears { get; set; }
        public DbSet<tblYarnPackageType> tblYarnPackageTypes { get; set; }
        public DbSet<tblYarnPurchase> tblYarnPurchases { get; set; }
        public DbSet<tblYarnPurchaseItem> tblYarnPurchaseItems { get; set; }
        public DbSet<tblYarnQualityMST> tblYarnQualityMSTs { get; set; }
        public DbSet<tblYarnTypeMST> tblYarnTypeMSTs { get; set; }
        public DbSet<WithdrownReturnMST> WithdrownReturnMSTs { get; set; }
    
        public virtual ObjectResult<tblAttendanceMST_BY_ID_LOAD_Result> tblAttendanceMST_BY_ID_LOAD(Nullable<long> attendanceID)
        {
            var attendanceIDParameter = attendanceID.HasValue ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblAttendanceMST_BY_ID_LOAD_Result>("tblAttendanceMST_BY_ID_LOAD", attendanceIDParameter);
        }
    
        public virtual int tblAttendanceMST_DELETE(Nullable<long> attendanceID)
        {
            var attendanceIDParameter = attendanceID.HasValue ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblAttendanceMST_DELETE", attendanceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblAttendanceMST_INSERT(Nullable<long> employeeID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> meterWorked, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var meterWorkedParameter = meterWorked.HasValue ?
                new ObjectParameter("MeterWorked", meterWorked) :
                new ObjectParameter("MeterWorked", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblAttendanceMST_INSERT", employeeIDParameter, startTimeParameter, endTimeParameter, meterWorkedParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblAttendanceMST_LOAD_ALL_Result> tblAttendanceMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblAttendanceMST_LOAD_ALL_Result>("tblAttendanceMST_LOAD_ALL");
        }
    
        public virtual int tblAttendanceMST_UPDATE(Nullable<long> attendanceID, Nullable<long> employeeID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> meterWorked, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var attendanceIDParameter = attendanceID.HasValue ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var meterWorkedParameter = meterWorked.HasValue ?
                new ObjectParameter("MeterWorked", meterWorked) :
                new ObjectParameter("MeterWorked", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblAttendanceMST_UPDATE", attendanceIDParameter, employeeIDParameter, startTimeParameter, endTimeParameter, meterWorkedParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBankMST_BY_ID_LOAD_Result> tblBankMST_BY_ID_LOAD(Nullable<long> bankID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBankMST_BY_ID_LOAD_Result>("tblBankMST_BY_ID_LOAD", bankIDParameter);
        }
    
        public virtual int tblBankMST_DELETE(Nullable<long> bankID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBankMST_DELETE", bankIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBankMST_INSERT(string bankName, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBankMST_INSERT", bankNameParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBankMST_LOAD_ALL_Result> tblBankMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBankMST_LOAD_ALL_Result>("tblBankMST_LOAD_ALL");
        }
    
        public virtual int tblBankMST_UPDATE(Nullable<long> bankID, string bankName, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(long));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBankMST_UPDATE", bankIDParameter, bankNameParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBeamMST_BY_ID_LOAD_Result> tblBeamMST_BY_ID_LOAD(Nullable<long> beemID)
        {
            var beemIDParameter = beemID.HasValue ?
                new ObjectParameter("BeemID", beemID) :
                new ObjectParameter("BeemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBeamMST_BY_ID_LOAD_Result>("tblBeamMST_BY_ID_LOAD", beemIDParameter);
        }
    
        public virtual int tblBeamMST_DELETE(Nullable<long> beemID)
        {
            var beemIDParameter = beemID.HasValue ?
                new ObjectParameter("BeemID", beemID) :
                new ObjectParameter("BeemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBeamMST_DELETE", beemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBeamMST_INSERT(Nullable<long> compnayID, Nullable<int> wrapperPartyName, Nullable<int> jobberPartyName, Nullable<System.DateTime> beemDate, Nullable<int> yarnQuality, Nullable<int> grayQuality, Nullable<int> tarNo, Nullable<double> meters, Nullable<int> taka, Nullable<double> weight, Nullable<double> productionMeters, Nullable<int> productionTaka, Nullable<double> pipeWeight, Nullable<System.DateTime> loadingDate, Nullable<double> minStragy, Nullable<int> machinNo, string remarks, Nullable<bool> bhidanStatus, Nullable<System.DateTime> bhidanDate, Nullable<int> pasaraiName, Nullable<double> count, Nullable<System.DateTime> issuDate, Nullable<bool> takaMeter, Nullable<double> rate, Nullable<double> amount, Nullable<double> meterConsumption, Nullable<double> rPM, Nullable<double> pick, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var compnayIDParameter = compnayID.HasValue ?
                new ObjectParameter("CompnayID", compnayID) :
                new ObjectParameter("CompnayID", typeof(long));
    
            var wrapperPartyNameParameter = wrapperPartyName.HasValue ?
                new ObjectParameter("WrapperPartyName", wrapperPartyName) :
                new ObjectParameter("WrapperPartyName", typeof(int));
    
            var jobberPartyNameParameter = jobberPartyName.HasValue ?
                new ObjectParameter("JobberPartyName", jobberPartyName) :
                new ObjectParameter("JobberPartyName", typeof(int));
    
            var beemDateParameter = beemDate.HasValue ?
                new ObjectParameter("BeemDate", beemDate) :
                new ObjectParameter("BeemDate", typeof(System.DateTime));
    
            var yarnQualityParameter = yarnQuality.HasValue ?
                new ObjectParameter("YarnQuality", yarnQuality) :
                new ObjectParameter("YarnQuality", typeof(int));
    
            var grayQualityParameter = grayQuality.HasValue ?
                new ObjectParameter("GrayQuality", grayQuality) :
                new ObjectParameter("GrayQuality", typeof(int));
    
            var tarNoParameter = tarNo.HasValue ?
                new ObjectParameter("TarNo", tarNo) :
                new ObjectParameter("TarNo", typeof(int));
    
            var metersParameter = meters.HasValue ?
                new ObjectParameter("Meters", meters) :
                new ObjectParameter("Meters", typeof(double));
    
            var takaParameter = taka.HasValue ?
                new ObjectParameter("Taka", taka) :
                new ObjectParameter("Taka", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var productionMetersParameter = productionMeters.HasValue ?
                new ObjectParameter("ProductionMeters", productionMeters) :
                new ObjectParameter("ProductionMeters", typeof(double));
    
            var productionTakaParameter = productionTaka.HasValue ?
                new ObjectParameter("ProductionTaka", productionTaka) :
                new ObjectParameter("ProductionTaka", typeof(int));
    
            var pipeWeightParameter = pipeWeight.HasValue ?
                new ObjectParameter("PipeWeight", pipeWeight) :
                new ObjectParameter("PipeWeight", typeof(double));
    
            var loadingDateParameter = loadingDate.HasValue ?
                new ObjectParameter("LoadingDate", loadingDate) :
                new ObjectParameter("LoadingDate", typeof(System.DateTime));
    
            var minStragyParameter = minStragy.HasValue ?
                new ObjectParameter("MinStragy", minStragy) :
                new ObjectParameter("MinStragy", typeof(double));
    
            var machinNoParameter = machinNo.HasValue ?
                new ObjectParameter("MachinNo", machinNo) :
                new ObjectParameter("MachinNo", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bhidanStatusParameter = bhidanStatus.HasValue ?
                new ObjectParameter("BhidanStatus", bhidanStatus) :
                new ObjectParameter("BhidanStatus", typeof(bool));
    
            var bhidanDateParameter = bhidanDate.HasValue ?
                new ObjectParameter("BhidanDate", bhidanDate) :
                new ObjectParameter("BhidanDate", typeof(System.DateTime));
    
            var pasaraiNameParameter = pasaraiName.HasValue ?
                new ObjectParameter("PasaraiName", pasaraiName) :
                new ObjectParameter("PasaraiName", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(double));
    
            var issuDateParameter = issuDate.HasValue ?
                new ObjectParameter("IssuDate", issuDate) :
                new ObjectParameter("IssuDate", typeof(System.DateTime));
    
            var takaMeterParameter = takaMeter.HasValue ?
                new ObjectParameter("TakaMeter", takaMeter) :
                new ObjectParameter("TakaMeter", typeof(bool));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var meterConsumptionParameter = meterConsumption.HasValue ?
                new ObjectParameter("MeterConsumption", meterConsumption) :
                new ObjectParameter("MeterConsumption", typeof(double));
    
            var rPMParameter = rPM.HasValue ?
                new ObjectParameter("RPM", rPM) :
                new ObjectParameter("RPM", typeof(double));
    
            var pickParameter = pick.HasValue ?
                new ObjectParameter("Pick", pick) :
                new ObjectParameter("Pick", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBeamMST_INSERT", compnayIDParameter, wrapperPartyNameParameter, jobberPartyNameParameter, beemDateParameter, yarnQualityParameter, grayQualityParameter, tarNoParameter, metersParameter, takaParameter, weightParameter, productionMetersParameter, productionTakaParameter, pipeWeightParameter, loadingDateParameter, minStragyParameter, machinNoParameter, remarksParameter, bhidanStatusParameter, bhidanDateParameter, pasaraiNameParameter, countParameter, issuDateParameter, takaMeterParameter, rateParameter, amountParameter, meterConsumptionParameter, rPMParameter, pickParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBeamMST_LOAD_ALL_Result> tblBeamMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBeamMST_LOAD_ALL_Result>("tblBeamMST_LOAD_ALL");
        }
    
        public virtual int tblBeamMST_UPDATE(Nullable<long> beemID, Nullable<long> compnayID, Nullable<int> wrapperPartyName, Nullable<int> jobberPartyName, Nullable<System.DateTime> beemDate, Nullable<int> yarnQuality, Nullable<int> grayQuality, Nullable<int> tarNo, Nullable<double> meters, Nullable<int> taka, Nullable<double> weight, Nullable<double> productionMeters, Nullable<int> productionTaka, Nullable<double> pipeWeight, Nullable<System.DateTime> loadingDate, Nullable<double> minStragy, Nullable<int> machinNo, string remarks, Nullable<bool> bhidanStatus, Nullable<System.DateTime> bhidanDate, Nullable<int> pasaraiName, Nullable<double> count, Nullable<System.DateTime> issuDate, Nullable<bool> takaMeter, Nullable<double> rate, Nullable<double> amount, Nullable<double> meterConsumption, Nullable<double> rPM, Nullable<double> pick, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var beemIDParameter = beemID.HasValue ?
                new ObjectParameter("BeemID", beemID) :
                new ObjectParameter("BeemID", typeof(long));
    
            var compnayIDParameter = compnayID.HasValue ?
                new ObjectParameter("CompnayID", compnayID) :
                new ObjectParameter("CompnayID", typeof(long));
    
            var wrapperPartyNameParameter = wrapperPartyName.HasValue ?
                new ObjectParameter("WrapperPartyName", wrapperPartyName) :
                new ObjectParameter("WrapperPartyName", typeof(int));
    
            var jobberPartyNameParameter = jobberPartyName.HasValue ?
                new ObjectParameter("JobberPartyName", jobberPartyName) :
                new ObjectParameter("JobberPartyName", typeof(int));
    
            var beemDateParameter = beemDate.HasValue ?
                new ObjectParameter("BeemDate", beemDate) :
                new ObjectParameter("BeemDate", typeof(System.DateTime));
    
            var yarnQualityParameter = yarnQuality.HasValue ?
                new ObjectParameter("YarnQuality", yarnQuality) :
                new ObjectParameter("YarnQuality", typeof(int));
    
            var grayQualityParameter = grayQuality.HasValue ?
                new ObjectParameter("GrayQuality", grayQuality) :
                new ObjectParameter("GrayQuality", typeof(int));
    
            var tarNoParameter = tarNo.HasValue ?
                new ObjectParameter("TarNo", tarNo) :
                new ObjectParameter("TarNo", typeof(int));
    
            var metersParameter = meters.HasValue ?
                new ObjectParameter("Meters", meters) :
                new ObjectParameter("Meters", typeof(double));
    
            var takaParameter = taka.HasValue ?
                new ObjectParameter("Taka", taka) :
                new ObjectParameter("Taka", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            var productionMetersParameter = productionMeters.HasValue ?
                new ObjectParameter("ProductionMeters", productionMeters) :
                new ObjectParameter("ProductionMeters", typeof(double));
    
            var productionTakaParameter = productionTaka.HasValue ?
                new ObjectParameter("ProductionTaka", productionTaka) :
                new ObjectParameter("ProductionTaka", typeof(int));
    
            var pipeWeightParameter = pipeWeight.HasValue ?
                new ObjectParameter("PipeWeight", pipeWeight) :
                new ObjectParameter("PipeWeight", typeof(double));
    
            var loadingDateParameter = loadingDate.HasValue ?
                new ObjectParameter("LoadingDate", loadingDate) :
                new ObjectParameter("LoadingDate", typeof(System.DateTime));
    
            var minStragyParameter = minStragy.HasValue ?
                new ObjectParameter("MinStragy", minStragy) :
                new ObjectParameter("MinStragy", typeof(double));
    
            var machinNoParameter = machinNo.HasValue ?
                new ObjectParameter("MachinNo", machinNo) :
                new ObjectParameter("MachinNo", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bhidanStatusParameter = bhidanStatus.HasValue ?
                new ObjectParameter("BhidanStatus", bhidanStatus) :
                new ObjectParameter("BhidanStatus", typeof(bool));
    
            var bhidanDateParameter = bhidanDate.HasValue ?
                new ObjectParameter("BhidanDate", bhidanDate) :
                new ObjectParameter("BhidanDate", typeof(System.DateTime));
    
            var pasaraiNameParameter = pasaraiName.HasValue ?
                new ObjectParameter("PasaraiName", pasaraiName) :
                new ObjectParameter("PasaraiName", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(double));
    
            var issuDateParameter = issuDate.HasValue ?
                new ObjectParameter("IssuDate", issuDate) :
                new ObjectParameter("IssuDate", typeof(System.DateTime));
    
            var takaMeterParameter = takaMeter.HasValue ?
                new ObjectParameter("TakaMeter", takaMeter) :
                new ObjectParameter("TakaMeter", typeof(bool));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var meterConsumptionParameter = meterConsumption.HasValue ?
                new ObjectParameter("MeterConsumption", meterConsumption) :
                new ObjectParameter("MeterConsumption", typeof(double));
    
            var rPMParameter = rPM.HasValue ?
                new ObjectParameter("RPM", rPM) :
                new ObjectParameter("RPM", typeof(double));
    
            var pickParameter = pick.HasValue ?
                new ObjectParameter("Pick", pick) :
                new ObjectParameter("Pick", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBeamMST_UPDATE", beemIDParameter, compnayIDParameter, wrapperPartyNameParameter, jobberPartyNameParameter, beemDateParameter, yarnQualityParameter, grayQualityParameter, tarNoParameter, metersParameter, takaParameter, weightParameter, productionMetersParameter, productionTakaParameter, pipeWeightParameter, loadingDateParameter, minStragyParameter, machinNoParameter, remarksParameter, bhidanStatusParameter, bhidanDateParameter, pasaraiNameParameter, countParameter, issuDateParameter, takaMeterParameter, rateParameter, amountParameter, meterConsumptionParameter, rPMParameter, pickParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBeemProcess_BY_ID_LOAD_Result> tblBeemProcess_BY_ID_LOAD(Nullable<long> beemProcessID)
        {
            var beemProcessIDParameter = beemProcessID.HasValue ?
                new ObjectParameter("BeemProcessID", beemProcessID) :
                new ObjectParameter("BeemProcessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBeemProcess_BY_ID_LOAD_Result>("tblBeemProcess_BY_ID_LOAD", beemProcessIDParameter);
        }
    
        public virtual int tblBeemProcess_DELETE(Nullable<long> beemProcessID)
        {
            var beemProcessIDParameter = beemProcessID.HasValue ?
                new ObjectParameter("BeemProcessID", beemProcessID) :
                new ObjectParameter("BeemProcessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBeemProcess_DELETE", beemProcessIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBeemProcess_INSERT(Nullable<long> machineID, Nullable<long> employeeID, string shift, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBeemProcess_INSERT", machineIDParameter, employeeIDParameter, shiftParameter, startDateTimeParameter, endDateTimeParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBeemProcess_LOAD_ALL_Result> tblBeemProcess_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBeemProcess_LOAD_ALL_Result>("tblBeemProcess_LOAD_ALL");
        }
    
        public virtual int tblBeemProcess_UPDATE(Nullable<long> beemProcessID, Nullable<long> machineID, Nullable<long> employeeID, string shift, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var beemProcessIDParameter = beemProcessID.HasValue ?
                new ObjectParameter("BeemProcessID", beemProcessID) :
                new ObjectParameter("BeemProcessID", typeof(long));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBeemProcess_UPDATE", beemProcessIDParameter, machineIDParameter, employeeIDParameter, shiftParameter, startDateTimeParameter, endDateTimeParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBemProcessDetails_BY_ID_LOAD_Result> tblBemProcessDetails_BY_ID_LOAD(Nullable<long> bemProcessDetailsID)
        {
            var bemProcessDetailsIDParameter = bemProcessDetailsID.HasValue ?
                new ObjectParameter("BemProcessDetailsID", bemProcessDetailsID) :
                new ObjectParameter("BemProcessDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBemProcessDetails_BY_ID_LOAD_Result>("tblBemProcessDetails_BY_ID_LOAD", bemProcessDetailsIDParameter);
        }
    
        public virtual int tblBemProcessDetails_DELETE(Nullable<long> bemProcessDetailsID)
        {
            var bemProcessDetailsIDParameter = bemProcessDetailsID.HasValue ?
                new ObjectParameter("BemProcessDetailsID", bemProcessDetailsID) :
                new ObjectParameter("BemProcessDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBemProcessDetails_DELETE", bemProcessDetailsIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBemProcessDetails_INSERT(Nullable<long> bemProcessID, Nullable<long> tFORoleProcessID, Nullable<int> issueNoOFCopes, Nullable<double> issueWeights, Nullable<long> yarnQualityID, Nullable<long> yarnTypeID, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var bemProcessIDParameter = bemProcessID.HasValue ?
                new ObjectParameter("BemProcessID", bemProcessID) :
                new ObjectParameter("BemProcessID", typeof(long));
    
            var tFORoleProcessIDParameter = tFORoleProcessID.HasValue ?
                new ObjectParameter("TFORoleProcessID", tFORoleProcessID) :
                new ObjectParameter("TFORoleProcessID", typeof(long));
    
            var issueNoOFCopesParameter = issueNoOFCopes.HasValue ?
                new ObjectParameter("IssueNoOFCopes", issueNoOFCopes) :
                new ObjectParameter("IssueNoOFCopes", typeof(int));
    
            var issueWeightsParameter = issueWeights.HasValue ?
                new ObjectParameter("IssueWeights", issueWeights) :
                new ObjectParameter("IssueWeights", typeof(double));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBemProcessDetails_INSERT", bemProcessIDParameter, tFORoleProcessIDParameter, issueNoOFCopesParameter, issueWeightsParameter, yarnQualityIDParameter, yarnTypeIDParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBemProcessDetails_LOAD_ALL_Result> tblBemProcessDetails_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBemProcessDetails_LOAD_ALL_Result>("tblBemProcessDetails_LOAD_ALL");
        }
    
        public virtual int tblBemProcessDetails_UPDATE(Nullable<long> bemProcessDetailsID, Nullable<long> bemProcessID, Nullable<long> tFORoleProcessID, Nullable<int> issueNoOFCopes, Nullable<double> issueWeights, Nullable<long> yarnQualityID, Nullable<long> yarnTypeID, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var bemProcessDetailsIDParameter = bemProcessDetailsID.HasValue ?
                new ObjectParameter("BemProcessDetailsID", bemProcessDetailsID) :
                new ObjectParameter("BemProcessDetailsID", typeof(long));
    
            var bemProcessIDParameter = bemProcessID.HasValue ?
                new ObjectParameter("BemProcessID", bemProcessID) :
                new ObjectParameter("BemProcessID", typeof(long));
    
            var tFORoleProcessIDParameter = tFORoleProcessID.HasValue ?
                new ObjectParameter("TFORoleProcessID", tFORoleProcessID) :
                new ObjectParameter("TFORoleProcessID", typeof(long));
    
            var issueNoOFCopesParameter = issueNoOFCopes.HasValue ?
                new ObjectParameter("IssueNoOFCopes", issueNoOFCopes) :
                new ObjectParameter("IssueNoOFCopes", typeof(int));
    
            var issueWeightsParameter = issueWeights.HasValue ?
                new ObjectParameter("IssueWeights", issueWeights) :
                new ObjectParameter("IssueWeights", typeof(double));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBemProcessDetails_UPDATE", bemProcessDetailsIDParameter, bemProcessIDParameter, tFORoleProcessIDParameter, issueNoOFCopesParameter, issueWeightsParameter, yarnQualityIDParameter, yarnTypeIDParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBoilerProcess_BY_ID_LOAD_Result> tblBoilerProcess_BY_ID_LOAD(Nullable<long> bolierProcessID)
        {
            var bolierProcessIDParameter = bolierProcessID.HasValue ?
                new ObjectParameter("BolierProcessID", bolierProcessID) :
                new ObjectParameter("BolierProcessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBoilerProcess_BY_ID_LOAD_Result>("tblBoilerProcess_BY_ID_LOAD", bolierProcessIDParameter);
        }
    
        public virtual int tblBoilerProcess_DELETE(Nullable<long> bolierProcessID)
        {
            var bolierProcessIDParameter = bolierProcessID.HasValue ?
                new ObjectParameter("BolierProcessID", bolierProcessID) :
                new ObjectParameter("BolierProcessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBoilerProcess_DELETE", bolierProcessIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBoilerProcess_INSERT(Nullable<long> machineID, Nullable<long> employeeID, string shift, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<double> tempreture, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTIme)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var tempretureParameter = tempreture.HasValue ?
                new ObjectParameter("Tempreture", tempreture) :
                new ObjectParameter("Tempreture", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTImeParameter = creationDateTIme.HasValue ?
                new ObjectParameter("CreationDateTIme", creationDateTIme) :
                new ObjectParameter("CreationDateTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBoilerProcess_INSERT", machineIDParameter, employeeIDParameter, shiftParameter, startDateTimeParameter, endDateTimeParameter, tempretureParameter, isActiveParameter, createByParameter, creationDateTImeParameter);
        }
    
        public virtual ObjectResult<tblBoilerProcess_LOAD_ALL_Result> tblBoilerProcess_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBoilerProcess_LOAD_ALL_Result>("tblBoilerProcess_LOAD_ALL");
        }
    
        public virtual int tblBoilerProcess_UPDATE(Nullable<long> bolierProcessID, Nullable<long> machineID, Nullable<long> employeeID, string shift, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<double> tempreture, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var bolierProcessIDParameter = bolierProcessID.HasValue ?
                new ObjectParameter("BolierProcessID", bolierProcessID) :
                new ObjectParameter("BolierProcessID", typeof(long));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var tempretureParameter = tempreture.HasValue ?
                new ObjectParameter("Tempreture", tempreture) :
                new ObjectParameter("Tempreture", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBoilerProcess_UPDATE", bolierProcessIDParameter, machineIDParameter, employeeIDParameter, shiftParameter, startDateTimeParameter, endDateTimeParameter, tempretureParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBolierProcessDetails_BY_ID_LOAD_Result> tblBolierProcessDetails_BY_ID_LOAD(Nullable<long> boilerProcessDetailsID)
        {
            var boilerProcessDetailsIDParameter = boilerProcessDetailsID.HasValue ?
                new ObjectParameter("BoilerProcessDetailsID", boilerProcessDetailsID) :
                new ObjectParameter("BoilerProcessDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBolierProcessDetails_BY_ID_LOAD_Result>("tblBolierProcessDetails_BY_ID_LOAD", boilerProcessDetailsIDParameter);
        }
    
        public virtual int tblBolierProcessDetails_DELETE(Nullable<long> boilerProcessDetailsID)
        {
            var boilerProcessDetailsIDParameter = boilerProcessDetailsID.HasValue ?
                new ObjectParameter("BoilerProcessDetailsID", boilerProcessDetailsID) :
                new ObjectParameter("BoilerProcessDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBolierProcessDetails_DELETE", boilerProcessDetailsIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBolierProcessDetails_INSERT(Nullable<long> boilerProcessID, Nullable<long> tFORoleProcessID, Nullable<int> issueNoOfTFORoles, Nullable<double> issueWeights, Nullable<long> yarnQualityID, Nullable<long> yarnTypeID, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime, Nullable<bool> isActive)
        {
            var boilerProcessIDParameter = boilerProcessID.HasValue ?
                new ObjectParameter("BoilerProcessID", boilerProcessID) :
                new ObjectParameter("BoilerProcessID", typeof(long));
    
            var tFORoleProcessIDParameter = tFORoleProcessID.HasValue ?
                new ObjectParameter("TFORoleProcessID", tFORoleProcessID) :
                new ObjectParameter("TFORoleProcessID", typeof(long));
    
            var issueNoOfTFORolesParameter = issueNoOfTFORoles.HasValue ?
                new ObjectParameter("IssueNoOfTFORoles", issueNoOfTFORoles) :
                new ObjectParameter("IssueNoOfTFORoles", typeof(int));
    
            var issueWeightsParameter = issueWeights.HasValue ?
                new ObjectParameter("IssueWeights", issueWeights) :
                new ObjectParameter("IssueWeights", typeof(double));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBolierProcessDetails_INSERT", boilerProcessIDParameter, tFORoleProcessIDParameter, issueNoOfTFORolesParameter, issueWeightsParameter, yarnQualityIDParameter, yarnTypeIDParameter, createdByParameter, createdDateTimeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<tblBolierProcessDetails_LOAD_ALL_Result> tblBolierProcessDetails_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBolierProcessDetails_LOAD_ALL_Result>("tblBolierProcessDetails_LOAD_ALL");
        }
    
        public virtual int tblBolierProcessDetails_UPDATE(Nullable<long> boilerProcessDetailsID, Nullable<long> boilerProcessID, Nullable<long> tFORoleProcessID, Nullable<int> issueNoOfTFORoles, Nullable<double> issueWeights, Nullable<long> yarnQualityID, Nullable<long> yarnTypeID)
        {
            var boilerProcessDetailsIDParameter = boilerProcessDetailsID.HasValue ?
                new ObjectParameter("BoilerProcessDetailsID", boilerProcessDetailsID) :
                new ObjectParameter("BoilerProcessDetailsID", typeof(long));
    
            var boilerProcessIDParameter = boilerProcessID.HasValue ?
                new ObjectParameter("BoilerProcessID", boilerProcessID) :
                new ObjectParameter("BoilerProcessID", typeof(long));
    
            var tFORoleProcessIDParameter = tFORoleProcessID.HasValue ?
                new ObjectParameter("TFORoleProcessID", tFORoleProcessID) :
                new ObjectParameter("TFORoleProcessID", typeof(long));
    
            var issueNoOfTFORolesParameter = issueNoOfTFORoles.HasValue ?
                new ObjectParameter("IssueNoOfTFORoles", issueNoOfTFORoles) :
                new ObjectParameter("IssueNoOfTFORoles", typeof(int));
    
            var issueWeightsParameter = issueWeights.HasValue ?
                new ObjectParameter("IssueWeights", issueWeights) :
                new ObjectParameter("IssueWeights", typeof(double));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBolierProcessDetails_UPDATE", boilerProcessDetailsIDParameter, boilerProcessIDParameter, tFORoleProcessIDParameter, issueNoOfTFORolesParameter, issueWeightsParameter, yarnQualityIDParameter, yarnTypeIDParameter);
        }
    
        public virtual ObjectResult<tblBranchMST_BY_ID_LOAD_Result> tblBranchMST_BY_ID_LOAD(Nullable<long> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBranchMST_BY_ID_LOAD_Result>("tblBranchMST_BY_ID_LOAD", branchIDParameter);
        }
    
        public virtual int tblBranchMST_DELETE(Nullable<long> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBranchMST_DELETE", branchIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBranchMST_INSERT(string branchName, string address, Nullable<long> bankID, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBranchMST_INSERT", branchNameParameter, addressParameter, bankIDParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBranchMST_LOAD_ALL_Result> tblBranchMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBranchMST_LOAD_ALL_Result>("tblBranchMST_LOAD_ALL");
        }
    
        public virtual int tblBranchMST_UPDATE(Nullable<long> branchID, string branchName, string address, Nullable<long> bankID, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(long));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBranchMST_UPDATE", branchIDParameter, branchNameParameter, addressParameter, bankIDParameter, isActiveParameter, createByParameter, creationDateTimeParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBrokersMST_BY_ID_LOAD_Result> tblBrokersMST_BY_ID_LOAD(Nullable<long> brokerID)
        {
            var brokerIDParameter = brokerID.HasValue ?
                new ObjectParameter("BrokerID", brokerID) :
                new ObjectParameter("BrokerID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBrokersMST_BY_ID_LOAD_Result>("tblBrokersMST_BY_ID_LOAD", brokerIDParameter);
        }
    
        public virtual int tblBrokersMST_DELETE(Nullable<long> brokerID)
        {
            var brokerIDParameter = brokerID.HasValue ?
                new ObjectParameter("BrokerID", brokerID) :
                new ObjectParameter("BrokerID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBrokersMST_DELETE", brokerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblBrokersMST_INSERT(string brokerName, string brokerFirmName, string address, string contactNo, string mobileNo, string dealingIn, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var brokerNameParameter = brokerName != null ?
                new ObjectParameter("BrokerName", brokerName) :
                new ObjectParameter("BrokerName", typeof(string));
    
            var brokerFirmNameParameter = brokerFirmName != null ?
                new ObjectParameter("BrokerFirmName", brokerFirmName) :
                new ObjectParameter("BrokerFirmName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var dealingInParameter = dealingIn != null ?
                new ObjectParameter("DealingIn", dealingIn) :
                new ObjectParameter("DealingIn", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblBrokersMST_INSERT", brokerNameParameter, brokerFirmNameParameter, addressParameter, contactNoParameter, mobileNoParameter, dealingInParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblBrokersMST_LOAD_ALL_Result> tblBrokersMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblBrokersMST_LOAD_ALL_Result>("tblBrokersMST_LOAD_ALL");
        }
    
        public virtual int tblBrokersMST_UPDATE(Nullable<long> brokerID, string brokerName, string brokerFirmName, string address, string contactNo, string mobileNo, string dealingIn, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var brokerIDParameter = brokerID.HasValue ?
                new ObjectParameter("BrokerID", brokerID) :
                new ObjectParameter("BrokerID", typeof(long));
    
            var brokerNameParameter = brokerName != null ?
                new ObjectParameter("BrokerName", brokerName) :
                new ObjectParameter("BrokerName", typeof(string));
    
            var brokerFirmNameParameter = brokerFirmName != null ?
                new ObjectParameter("BrokerFirmName", brokerFirmName) :
                new ObjectParameter("BrokerFirmName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var dealingInParameter = dealingIn != null ?
                new ObjectParameter("DealingIn", dealingIn) :
                new ObjectParameter("DealingIn", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblBrokersMST_UPDATE", brokerIDParameter, brokerNameParameter, brokerFirmNameParameter, addressParameter, contactNoParameter, mobileNoParameter, dealingInParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblCompany_BY_ID_LOAD_Result> tblCompany_BY_ID_LOAD(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblCompany_BY_ID_LOAD_Result>("tblCompany_BY_ID_LOAD", companyIDParameter);
        }
    
        public virtual int tblCompany_DELETE(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblCompany_DELETE", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblCompany_INSERT(Nullable<long> companyID, string companyName, string comapnyCode, string ownerName, Nullable<System.DateTime> startDate, string address, string contactPersonName, Nullable<System.DateTime> creationDate, Nullable<double> investmentAmount, string pANNo, string cSTNo, string eCCNo, string sMSNO, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var comapnyCodeParameter = comapnyCode != null ?
                new ObjectParameter("ComapnyCode", comapnyCode) :
                new ObjectParameter("ComapnyCode", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var investmentAmountParameter = investmentAmount.HasValue ?
                new ObjectParameter("InvestmentAmount", investmentAmount) :
                new ObjectParameter("InvestmentAmount", typeof(double));
    
            var pANNoParameter = pANNo != null ?
                new ObjectParameter("PANNo", pANNo) :
                new ObjectParameter("PANNo", typeof(string));
    
            var cSTNoParameter = cSTNo != null ?
                new ObjectParameter("CSTNo", cSTNo) :
                new ObjectParameter("CSTNo", typeof(string));
    
            var eCCNoParameter = eCCNo != null ?
                new ObjectParameter("ECCNo", eCCNo) :
                new ObjectParameter("ECCNo", typeof(string));
    
            var sMSNOParameter = sMSNO != null ?
                new ObjectParameter("SMSNO", sMSNO) :
                new ObjectParameter("SMSNO", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblCompany_INSERT", companyIDParameter, companyNameParameter, comapnyCodeParameter, ownerNameParameter, startDateParameter, addressParameter, contactPersonNameParameter, creationDateParameter, investmentAmountParameter, pANNoParameter, cSTNoParameter, eCCNoParameter, sMSNOParameter, isActiveParameter, createdByParameter, createdDateTimeParameter);
        }
    
        public virtual ObjectResult<tblCompany_LOAD_ALL_Result> tblCompany_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblCompany_LOAD_ALL_Result>("tblCompany_LOAD_ALL");
        }
    
        public virtual int tblCompany_UPDATE(Nullable<long> companyID, string companyName, string comapnyCode, string ownerName, Nullable<System.DateTime> startDate, string address, string contactPersonName, Nullable<double> investmentAmount, string pANNo, string cSTNo, string eCCNo, string sMSNO, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDateTime)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var comapnyCodeParameter = comapnyCode != null ?
                new ObjectParameter("ComapnyCode", comapnyCode) :
                new ObjectParameter("ComapnyCode", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var investmentAmountParameter = investmentAmount.HasValue ?
                new ObjectParameter("InvestmentAmount", investmentAmount) :
                new ObjectParameter("InvestmentAmount", typeof(double));
    
            var pANNoParameter = pANNo != null ?
                new ObjectParameter("PANNo", pANNo) :
                new ObjectParameter("PANNo", typeof(string));
    
            var cSTNoParameter = cSTNo != null ?
                new ObjectParameter("CSTNo", cSTNo) :
                new ObjectParameter("CSTNo", typeof(string));
    
            var eCCNoParameter = eCCNo != null ?
                new ObjectParameter("ECCNo", eCCNo) :
                new ObjectParameter("ECCNo", typeof(string));
    
            var sMSNOParameter = sMSNO != null ?
                new ObjectParameter("SMSNO", sMSNO) :
                new ObjectParameter("SMSNO", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateTimeParameter = updatedDateTime.HasValue ?
                new ObjectParameter("UpdatedDateTime", updatedDateTime) :
                new ObjectParameter("UpdatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblCompany_UPDATE", companyIDParameter, companyNameParameter, comapnyCodeParameter, ownerNameParameter, startDateParameter, addressParameter, contactPersonNameParameter, investmentAmountParameter, pANNoParameter, cSTNoParameter, eCCNoParameter, sMSNOParameter, isActiveParameter, updatedByParameter, updatedDateTimeParameter);
        }
    
        public virtual int tblCompanyMachine_BY_ID_LOAD(Nullable<long> rowId)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblCompanyMachine_BY_ID_LOAD", rowIdParameter);
        }
    
        public virtual int tblCompanyMachine_DELETE(Nullable<long> rowId)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblCompanyMachine_DELETE", rowIdParameter);
        }
    
        public virtual int tblCompanyMachine_INSERT(Nullable<long> rowId, Nullable<long> machineId, Nullable<long> companyId)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(long));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblCompanyMachine_INSERT", rowIdParameter, machineIdParameter, companyIdParameter);
        }
    
        public virtual int tblCompanyMachine_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblCompanyMachine_LOAD_ALL");
        }
    
        public virtual int tblCompanyMachine_UPDATE(Nullable<long> rowId, Nullable<long> machineId, Nullable<long> companyId)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(long));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblCompanyMachine_UPDATE", rowIdParameter, machineIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<tblEmployee_BY_ID_LOAD_Result> tblEmployee_BY_ID_LOAD(Nullable<long> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblEmployee_BY_ID_LOAD_Result>("tblEmployee_BY_ID_LOAD", employeeIDParameter);
        }
    
        public virtual int tblEmployee_DELETE(Nullable<long> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblEmployee_DELETE", employeeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblEmployee_INSERT(Nullable<long> employeeTypeID, string employeeCode, string jobTitle, string firstName, string middleName, string lastName, string residentialAddress, string permanentAddress, string mobileNo, string emailID, Nullable<System.DateTime> dOB, string gender, string iDProfe, string iDProfeNo, byte[] photo, Nullable<System.DateTime> joinDate, Nullable<System.DateTime> leaveDate, Nullable<int> sponsorsID, string shift, Nullable<double> salary, Nullable<double> perDayWorkingHours, Nullable<double> perHourSalary, Nullable<bool> paymentType, string bankName, string branchName, string accountNo, string rTGSNo, string iFSCCode, Nullable<double> openingBalance, Nullable<bool> isActive, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(long));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var residentialAddressParameter = residentialAddress != null ?
                new ObjectParameter("ResidentialAddress", residentialAddress) :
                new ObjectParameter("ResidentialAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var iDProfeParameter = iDProfe != null ?
                new ObjectParameter("IDProfe", iDProfe) :
                new ObjectParameter("IDProfe", typeof(string));
    
            var iDProfeNoParameter = iDProfeNo != null ?
                new ObjectParameter("IDProfeNo", iDProfeNo) :
                new ObjectParameter("IDProfeNo", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var joinDateParameter = joinDate.HasValue ?
                new ObjectParameter("JoinDate", joinDate) :
                new ObjectParameter("JoinDate", typeof(System.DateTime));
    
            var leaveDateParameter = leaveDate.HasValue ?
                new ObjectParameter("LeaveDate", leaveDate) :
                new ObjectParameter("LeaveDate", typeof(System.DateTime));
    
            var sponsorsIDParameter = sponsorsID.HasValue ?
                new ObjectParameter("SponsorsID", sponsorsID) :
                new ObjectParameter("SponsorsID", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            var perDayWorkingHoursParameter = perDayWorkingHours.HasValue ?
                new ObjectParameter("PerDayWorkingHours", perDayWorkingHours) :
                new ObjectParameter("PerDayWorkingHours", typeof(double));
    
            var perHourSalaryParameter = perHourSalary.HasValue ?
                new ObjectParameter("PerHourSalary", perHourSalary) :
                new ObjectParameter("PerHourSalary", typeof(double));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(bool));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var rTGSNoParameter = rTGSNo != null ?
                new ObjectParameter("RTGSNo", rTGSNo) :
                new ObjectParameter("RTGSNo", typeof(string));
    
            var iFSCCodeParameter = iFSCCode != null ?
                new ObjectParameter("IFSCCode", iFSCCode) :
                new ObjectParameter("IFSCCode", typeof(string));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblEmployee_INSERT", employeeTypeIDParameter, employeeCodeParameter, jobTitleParameter, firstNameParameter, middleNameParameter, lastNameParameter, residentialAddressParameter, permanentAddressParameter, mobileNoParameter, emailIDParameter, dOBParameter, genderParameter, iDProfeParameter, iDProfeNoParameter, photoParameter, joinDateParameter, leaveDateParameter, sponsorsIDParameter, shiftParameter, salaryParameter, perDayWorkingHoursParameter, perHourSalaryParameter, paymentTypeParameter, bankNameParameter, branchNameParameter, accountNoParameter, rTGSNoParameter, iFSCCodeParameter, openingBalanceParameter, isActiveParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<tblEmployee_LOAD_ALL_Result> tblEmployee_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblEmployee_LOAD_ALL_Result>("tblEmployee_LOAD_ALL");
        }
    
        public virtual int tblEmployee_UPDATE(Nullable<long> employeeID, Nullable<long> employeeTypeID, string employeeCode, string jobTitle, string firstName, string middleName, string lastName, string residentialAddress, string permanentAddress, string mobileNo, string emailID, Nullable<System.DateTime> dOB, string gender, string iDProfe, string iDProfeNo, byte[] photo, Nullable<System.DateTime> joinDate, Nullable<System.DateTime> leaveDate, Nullable<int> sponsorsID, string shift, Nullable<double> salary, Nullable<double> perDayWorkingHours, Nullable<double> perHourSalary, Nullable<bool> paymentType, string bankName, string branchName, string accountNo, string rTGSNo, string iFSCCode, Nullable<double> openingBalance, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(long));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var residentialAddressParameter = residentialAddress != null ?
                new ObjectParameter("ResidentialAddress", residentialAddress) :
                new ObjectParameter("ResidentialAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var iDProfeParameter = iDProfe != null ?
                new ObjectParameter("IDProfe", iDProfe) :
                new ObjectParameter("IDProfe", typeof(string));
    
            var iDProfeNoParameter = iDProfeNo != null ?
                new ObjectParameter("IDProfeNo", iDProfeNo) :
                new ObjectParameter("IDProfeNo", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var joinDateParameter = joinDate.HasValue ?
                new ObjectParameter("JoinDate", joinDate) :
                new ObjectParameter("JoinDate", typeof(System.DateTime));
    
            var leaveDateParameter = leaveDate.HasValue ?
                new ObjectParameter("LeaveDate", leaveDate) :
                new ObjectParameter("LeaveDate", typeof(System.DateTime));
    
            var sponsorsIDParameter = sponsorsID.HasValue ?
                new ObjectParameter("SponsorsID", sponsorsID) :
                new ObjectParameter("SponsorsID", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            var perDayWorkingHoursParameter = perDayWorkingHours.HasValue ?
                new ObjectParameter("PerDayWorkingHours", perDayWorkingHours) :
                new ObjectParameter("PerDayWorkingHours", typeof(double));
    
            var perHourSalaryParameter = perHourSalary.HasValue ?
                new ObjectParameter("PerHourSalary", perHourSalary) :
                new ObjectParameter("PerHourSalary", typeof(double));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(bool));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var rTGSNoParameter = rTGSNo != null ?
                new ObjectParameter("RTGSNo", rTGSNo) :
                new ObjectParameter("RTGSNo", typeof(string));
    
            var iFSCCodeParameter = iFSCCode != null ?
                new ObjectParameter("IFSCCode", iFSCCode) :
                new ObjectParameter("IFSCCode", typeof(string));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblEmployee_UPDATE", employeeIDParameter, employeeTypeIDParameter, employeeCodeParameter, jobTitleParameter, firstNameParameter, middleNameParameter, lastNameParameter, residentialAddressParameter, permanentAddressParameter, mobileNoParameter, emailIDParameter, dOBParameter, genderParameter, iDProfeParameter, iDProfeNoParameter, photoParameter, joinDateParameter, leaveDateParameter, sponsorsIDParameter, shiftParameter, salaryParameter, perDayWorkingHoursParameter, perHourSalaryParameter, paymentTypeParameter, bankNameParameter, branchNameParameter, accountNoParameter, rTGSNoParameter, iFSCCodeParameter, openingBalanceParameter, isActiveParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual int tblEmployeeType_BY_ID_LOAD(Nullable<long> employeeTypeID)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblEmployeeType_BY_ID_LOAD", employeeTypeIDParameter);
        }
    
        public virtual int tblEmployeeType_DELETE(Nullable<long> employeeTypeID)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblEmployeeType_DELETE", employeeTypeIDParameter);
        }
    
        public virtual int tblEmployeeType_INSERT(string typeName, string description, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblEmployeeType_INSERT", typeNameParameter, descriptionParameter, isActiveParameter, createdByParameter, createdDateTimeParameter);
        }
    
        public virtual int tblEmployeeType_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblEmployeeType_LOAD_ALL");
        }
    
        public virtual int tblEmployeeType_UPDATE(Nullable<long> employeeTypeID, string typeName, string description, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDateTime)
        {
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(long));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateTimeParameter = updatedDateTime.HasValue ?
                new ObjectParameter("UpdatedDateTime", updatedDateTime) :
                new ObjectParameter("UpdatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblEmployeeType_UPDATE", employeeTypeIDParameter, typeNameParameter, descriptionParameter, isActiveParameter, updatedByParameter, updatedDateTimeParameter);
        }
    
        public virtual ObjectResult<tblLoomProcess_BY_ID_LOAD_Result> tblLoomProcess_BY_ID_LOAD(Nullable<long> loomProcessID)
        {
            var loomProcessIDParameter = loomProcessID.HasValue ?
                new ObjectParameter("LoomProcessID", loomProcessID) :
                new ObjectParameter("LoomProcessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblLoomProcess_BY_ID_LOAD_Result>("tblLoomProcess_BY_ID_LOAD", loomProcessIDParameter);
        }
    
        public virtual int tblLoomProcess_DELETE(Nullable<long> loomProcessID)
        {
            var loomProcessIDParameter = loomProcessID.HasValue ?
                new ObjectParameter("LoomProcessID", loomProcessID) :
                new ObjectParameter("LoomProcessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblLoomProcess_DELETE", loomProcessIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblLoomProcess_INSERT(Nullable<long> beemProcessID, Nullable<long> machineID, Nullable<double> noofTFORole, Nullable<System.DateTime> creatoinDateTime)
        {
            var beemProcessIDParameter = beemProcessID.HasValue ?
                new ObjectParameter("BeemProcessID", beemProcessID) :
                new ObjectParameter("BeemProcessID", typeof(long));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var noofTFORoleParameter = noofTFORole.HasValue ?
                new ObjectParameter("NoofTFORole", noofTFORole) :
                new ObjectParameter("NoofTFORole", typeof(double));
    
            var creatoinDateTimeParameter = creatoinDateTime.HasValue ?
                new ObjectParameter("CreatoinDateTime", creatoinDateTime) :
                new ObjectParameter("CreatoinDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblLoomProcess_INSERT", beemProcessIDParameter, machineIDParameter, noofTFORoleParameter, creatoinDateTimeParameter);
        }
    
        public virtual ObjectResult<tblLoomProcess_LOAD_ALL_Result> tblLoomProcess_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblLoomProcess_LOAD_ALL_Result>("tblLoomProcess_LOAD_ALL");
        }
    
        public virtual int tblLoomProcess_UPDATE(Nullable<long> loomProcessID, Nullable<long> beemProcessID, Nullable<long> machineID, Nullable<double> noofTFORole, Nullable<System.DateTime> creatoinDateTime)
        {
            var loomProcessIDParameter = loomProcessID.HasValue ?
                new ObjectParameter("LoomProcessID", loomProcessID) :
                new ObjectParameter("LoomProcessID", typeof(long));
    
            var beemProcessIDParameter = beemProcessID.HasValue ?
                new ObjectParameter("BeemProcessID", beemProcessID) :
                new ObjectParameter("BeemProcessID", typeof(long));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var noofTFORoleParameter = noofTFORole.HasValue ?
                new ObjectParameter("NoofTFORole", noofTFORole) :
                new ObjectParameter("NoofTFORole", typeof(double));
    
            var creatoinDateTimeParameter = creatoinDateTime.HasValue ?
                new ObjectParameter("CreatoinDateTime", creatoinDateTime) :
                new ObjectParameter("CreatoinDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblLoomProcess_UPDATE", loomProcessIDParameter, beemProcessIDParameter, machineIDParameter, noofTFORoleParameter, creatoinDateTimeParameter);
        }
    
        public virtual ObjectResult<tblLoomProcessWork_BY_ID_LOAD_Result> tblLoomProcessWork_BY_ID_LOAD(Nullable<long> loomProcessWorkID)
        {
            var loomProcessWorkIDParameter = loomProcessWorkID.HasValue ?
                new ObjectParameter("LoomProcessWorkID", loomProcessWorkID) :
                new ObjectParameter("LoomProcessWorkID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblLoomProcessWork_BY_ID_LOAD_Result>("tblLoomProcessWork_BY_ID_LOAD", loomProcessWorkIDParameter);
        }
    
        public virtual int tblLoomProcessWork_DELETE(Nullable<long> loomProcessWorkID)
        {
            var loomProcessWorkIDParameter = loomProcessWorkID.HasValue ?
                new ObjectParameter("LoomProcessWorkID", loomProcessWorkID) :
                new ObjectParameter("LoomProcessWorkID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblLoomProcessWork_DELETE", loomProcessWorkIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblLoomProcessWork_INSERT(Nullable<long> loomProcessID, Nullable<long> employeeID, Nullable<System.DateTime> workingDate, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string shift, Nullable<double> mTRStart, Nullable<double> mTREnd)
        {
            var loomProcessIDParameter = loomProcessID.HasValue ?
                new ObjectParameter("LoomProcessID", loomProcessID) :
                new ObjectParameter("LoomProcessID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var mTRStartParameter = mTRStart.HasValue ?
                new ObjectParameter("MTRStart", mTRStart) :
                new ObjectParameter("MTRStart", typeof(double));
    
            var mTREndParameter = mTREnd.HasValue ?
                new ObjectParameter("MTREnd", mTREnd) :
                new ObjectParameter("MTREnd", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblLoomProcessWork_INSERT", loomProcessIDParameter, employeeIDParameter, workingDateParameter, startTimeParameter, endTimeParameter, shiftParameter, mTRStartParameter, mTREndParameter);
        }
    
        public virtual ObjectResult<tblLoomProcessWork_LOAD_ALL_Result> tblLoomProcessWork_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblLoomProcessWork_LOAD_ALL_Result>("tblLoomProcessWork_LOAD_ALL");
        }
    
        public virtual int tblLoomProcessWork_UPDATE(Nullable<long> loomProcessWorkID, Nullable<long> loomProcessID, Nullable<long> employeeID, Nullable<System.DateTime> workingDate, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string shift, Nullable<double> mTRStart, Nullable<double> mTREnd)
        {
            var loomProcessWorkIDParameter = loomProcessWorkID.HasValue ?
                new ObjectParameter("LoomProcessWorkID", loomProcessWorkID) :
                new ObjectParameter("LoomProcessWorkID", typeof(long));
    
            var loomProcessIDParameter = loomProcessID.HasValue ?
                new ObjectParameter("LoomProcessID", loomProcessID) :
                new ObjectParameter("LoomProcessID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var workingDateParameter = workingDate.HasValue ?
                new ObjectParameter("WorkingDate", workingDate) :
                new ObjectParameter("WorkingDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var mTRStartParameter = mTRStart.HasValue ?
                new ObjectParameter("MTRStart", mTRStart) :
                new ObjectParameter("MTRStart", typeof(double));
    
            var mTREndParameter = mTREnd.HasValue ?
                new ObjectParameter("MTREnd", mTREnd) :
                new ObjectParameter("MTREnd", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblLoomProcessWork_UPDATE", loomProcessWorkIDParameter, loomProcessIDParameter, employeeIDParameter, workingDateParameter, startTimeParameter, endTimeParameter, shiftParameter, mTRStartParameter, mTREndParameter);
        }
    
        public virtual int tblMachine_BY_ID_LOAD(Nullable<long> machineID)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachine_BY_ID_LOAD", machineIDParameter);
        }
    
        public virtual int tblMachine_DELETE(Nullable<long> machineID)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachine_DELETE", machineIDParameter);
        }
    
        public virtual int tblMachine_INSERT(Nullable<long> machineID, string machineName, Nullable<long> machineTypeID, string aboutMachine, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(long));
    
            var aboutMachineParameter = aboutMachine != null ?
                new ObjectParameter("AboutMachine", aboutMachine) :
                new ObjectParameter("AboutMachine", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachine_INSERT", machineIDParameter, machineNameParameter, machineTypeIDParameter, aboutMachineParameter, isActiveParameter, createdByParameter, createdDateTimeParameter);
        }
    
        public virtual int tblMachine_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachine_LOAD_ALL");
        }
    
        public virtual int tblMachine_UPDATE(Nullable<long> machineID, string machineName, Nullable<long> machineTypeID, string aboutMachine, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDateTime)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(long));
    
            var aboutMachineParameter = aboutMachine != null ?
                new ObjectParameter("AboutMachine", aboutMachine) :
                new ObjectParameter("AboutMachine", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateTimeParameter = updatedDateTime.HasValue ?
                new ObjectParameter("UpdatedDateTime", updatedDateTime) :
                new ObjectParameter("UpdatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachine_UPDATE", machineIDParameter, machineNameParameter, machineTypeIDParameter, aboutMachineParameter, isActiveParameter, updatedByParameter, updatedDateTimeParameter);
        }
    
        public virtual int tblMachineType_BY_ID_LOAD(Nullable<long> machineTypeID)
        {
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachineType_BY_ID_LOAD", machineTypeIDParameter);
        }
    
        public virtual int tblMachineType_DELETE(Nullable<long> machineTypeID)
        {
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachineType_DELETE", machineTypeIDParameter);
        }
    
        public virtual int tblMachineType_INSERT(string typeName, string description, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachineType_INSERT", typeNameParameter, descriptionParameter, isActiveParameter, createdByParameter, createdDateTimeParameter);
        }
    
        public virtual int tblMachineType_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachineType_LOAD_ALL");
        }
    
        public virtual int tblMachineType_UPDATE(Nullable<long> machineTypeID, string typeName, string description, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDateTime)
        {
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(long));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateTimeParameter = updatedDateTime.HasValue ?
                new ObjectParameter("UpdatedDateTime", updatedDateTime) :
                new ObjectParameter("UpdatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMachineType_UPDATE", machineTypeIDParameter, typeNameParameter, descriptionParameter, isActiveParameter, updatedByParameter, updatedDateTimeParameter);
        }
    
        public virtual ObjectResult<tblMandingProcess_BY_ID_LOAD_Result> tblMandingProcess_BY_ID_LOAD(Nullable<long> mendingID)
        {
            var mendingIDParameter = mendingID.HasValue ?
                new ObjectParameter("MendingID", mendingID) :
                new ObjectParameter("MendingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblMandingProcess_BY_ID_LOAD_Result>("tblMandingProcess_BY_ID_LOAD", mendingIDParameter);
        }
    
        public virtual int tblMandingProcess_DELETE(Nullable<long> mendingID)
        {
            var mendingIDParameter = mendingID.HasValue ?
                new ObjectParameter("MendingID", mendingID) :
                new ObjectParameter("MendingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMandingProcess_DELETE", mendingIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblMandingProcess_INSERT(Nullable<int> takaNo, Nullable<long> employeeID, string grade, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<double> totalMeter, Nullable<int> totalNoOfFaults, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var takaNoParameter = takaNo.HasValue ?
                new ObjectParameter("TakaNo", takaNo) :
                new ObjectParameter("TakaNo", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var totalMeterParameter = totalMeter.HasValue ?
                new ObjectParameter("TotalMeter", totalMeter) :
                new ObjectParameter("TotalMeter", typeof(double));
    
            var totalNoOfFaultsParameter = totalNoOfFaults.HasValue ?
                new ObjectParameter("TotalNoOfFaults", totalNoOfFaults) :
                new ObjectParameter("TotalNoOfFaults", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblMandingProcess_INSERT", takaNoParameter, employeeIDParameter, gradeParameter, startDateTimeParameter, endDateTimeParameter, totalMeterParameter, totalNoOfFaultsParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblMandingProcess_LOAD_ALL_Result> tblMandingProcess_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblMandingProcess_LOAD_ALL_Result>("tblMandingProcess_LOAD_ALL");
        }
    
        public virtual int tblMandingProcess_UPDATE(Nullable<long> mendingID, Nullable<int> takaNo, Nullable<long> employeeID, string grade, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<double> totalMeter, Nullable<int> totalNoOfFaults, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var mendingIDParameter = mendingID.HasValue ?
                new ObjectParameter("MendingID", mendingID) :
                new ObjectParameter("MendingID", typeof(long));
    
            var takaNoParameter = takaNo.HasValue ?
                new ObjectParameter("TakaNo", takaNo) :
                new ObjectParameter("TakaNo", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var totalMeterParameter = totalMeter.HasValue ?
                new ObjectParameter("TotalMeter", totalMeter) :
                new ObjectParameter("TotalMeter", typeof(double));
    
            var totalNoOfFaultsParameter = totalNoOfFaults.HasValue ?
                new ObjectParameter("TotalNoOfFaults", totalNoOfFaults) :
                new ObjectParameter("TotalNoOfFaults", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMandingProcess_UPDATE", mendingIDParameter, takaNoParameter, employeeIDParameter, gradeParameter, startDateTimeParameter, endDateTimeParameter, totalMeterParameter, totalNoOfFaultsParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblMendingDetailsProcess_BY_ID_LOAD_Result> tblMendingDetailsProcess_BY_ID_LOAD(Nullable<long> mendingDetailsID)
        {
            var mendingDetailsIDParameter = mendingDetailsID.HasValue ?
                new ObjectParameter("MendingDetailsID", mendingDetailsID) :
                new ObjectParameter("MendingDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblMendingDetailsProcess_BY_ID_LOAD_Result>("tblMendingDetailsProcess_BY_ID_LOAD", mendingDetailsIDParameter);
        }
    
        public virtual int tblMendingDetailsProcess_DELETE(Nullable<long> mendingDetailsID)
        {
            var mendingDetailsIDParameter = mendingDetailsID.HasValue ?
                new ObjectParameter("MendingDetailsID", mendingDetailsID) :
                new ObjectParameter("MendingDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMendingDetailsProcess_DELETE", mendingDetailsIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblMendingDetailsProcess_INSERT(Nullable<long> mendingID, Nullable<long> employeeID, Nullable<double> startMeter, Nullable<double> endMeter, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var mendingIDParameter = mendingID.HasValue ?
                new ObjectParameter("MendingID", mendingID) :
                new ObjectParameter("MendingID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var startMeterParameter = startMeter.HasValue ?
                new ObjectParameter("StartMeter", startMeter) :
                new ObjectParameter("StartMeter", typeof(double));
    
            var endMeterParameter = endMeter.HasValue ?
                new ObjectParameter("EndMeter", endMeter) :
                new ObjectParameter("EndMeter", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblMendingDetailsProcess_INSERT", mendingIDParameter, employeeIDParameter, startMeterParameter, endMeterParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblMendingDetailsProcess_LOAD_ALL_Result> tblMendingDetailsProcess_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblMendingDetailsProcess_LOAD_ALL_Result>("tblMendingDetailsProcess_LOAD_ALL");
        }
    
        public virtual int tblMendingDetailsProcess_UPDATE(Nullable<long> mendingDetailsID, Nullable<long> mendingID, Nullable<long> employeeID, Nullable<double> startMeter, Nullable<double> endMeter, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var mendingDetailsIDParameter = mendingDetailsID.HasValue ?
                new ObjectParameter("MendingDetailsID", mendingDetailsID) :
                new ObjectParameter("MendingDetailsID", typeof(long));
    
            var mendingIDParameter = mendingID.HasValue ?
                new ObjectParameter("MendingID", mendingID) :
                new ObjectParameter("MendingID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var startMeterParameter = startMeter.HasValue ?
                new ObjectParameter("StartMeter", startMeter) :
                new ObjectParameter("StartMeter", typeof(double));
    
            var endMeterParameter = endMeter.HasValue ?
                new ObjectParameter("EndMeter", endMeter) :
                new ObjectParameter("EndMeter", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMendingDetailsProcess_UPDATE", mendingDetailsIDParameter, mendingIDParameter, employeeIDParameter, startMeterParameter, endMeterParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblMendingPenulty_BY_ID_LOAD_Result> tblMendingPenulty_BY_ID_LOAD(Nullable<long> mendingPenultyID)
        {
            var mendingPenultyIDParameter = mendingPenultyID.HasValue ?
                new ObjectParameter("MendingPenultyID", mendingPenultyID) :
                new ObjectParameter("MendingPenultyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblMendingPenulty_BY_ID_LOAD_Result>("tblMendingPenulty_BY_ID_LOAD", mendingPenultyIDParameter);
        }
    
        public virtual int tblMendingPenulty_DELETE(Nullable<long> mendingPenultyID)
        {
            var mendingPenultyIDParameter = mendingPenultyID.HasValue ?
                new ObjectParameter("MendingPenultyID", mendingPenultyID) :
                new ObjectParameter("MendingPenultyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMendingPenulty_DELETE", mendingPenultyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblMendingPenulty_INSERT(Nullable<long> employeeID, Nullable<long> penultyID, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var penultyIDParameter = penultyID.HasValue ?
                new ObjectParameter("PenultyID", penultyID) :
                new ObjectParameter("PenultyID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblMendingPenulty_INSERT", employeeIDParameter, penultyIDParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblMendingPenulty_LOAD_ALL_Result> tblMendingPenulty_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblMendingPenulty_LOAD_ALL_Result>("tblMendingPenulty_LOAD_ALL");
        }
    
        public virtual int tblMendingPenulty_UPDATE(Nullable<long> mendingPenultyID, Nullable<long> employeeID, Nullable<long> penultyID, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var mendingPenultyIDParameter = mendingPenultyID.HasValue ?
                new ObjectParameter("MendingPenultyID", mendingPenultyID) :
                new ObjectParameter("MendingPenultyID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var penultyIDParameter = penultyID.HasValue ?
                new ObjectParameter("PenultyID", penultyID) :
                new ObjectParameter("PenultyID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblMendingPenulty_UPDATE", mendingPenultyIDParameter, employeeIDParameter, penultyIDParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblPartysMST_BY_ID_LOAD_Result> tblPartysMST_BY_ID_LOAD(Nullable<long> partyID)
        {
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPartysMST_BY_ID_LOAD_Result>("tblPartysMST_BY_ID_LOAD", partyIDParameter);
        }
    
        public virtual int tblPartysMST_DELETE(Nullable<long> partyID)
        {
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblPartysMST_DELETE", partyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblPartysMST_INSERT(Nullable<int> companyCode, string partyName, string contactPersonName, string officeAddress, string shippingAddress, string city, string state, string mobileNo, string phoneNo, string sMSNo, string referencePersonName, string referencePersonMobileNo, string emailID, string extraDetails, string tINNo, Nullable<System.DateTime> tINDate, string pANNO, string cSTTINNo, Nullable<System.DateTime> cSTDate, string eCCNo, Nullable<bool> isActive, Nullable<int> createBye, Nullable<System.DateTime> creationDateTime)
        {
            var companyCodeParameter = companyCode.HasValue ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var officeAddressParameter = officeAddress != null ?
                new ObjectParameter("OfficeAddress", officeAddress) :
                new ObjectParameter("OfficeAddress", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var sMSNoParameter = sMSNo != null ?
                new ObjectParameter("SMSNo", sMSNo) :
                new ObjectParameter("SMSNo", typeof(string));
    
            var referencePersonNameParameter = referencePersonName != null ?
                new ObjectParameter("ReferencePersonName", referencePersonName) :
                new ObjectParameter("ReferencePersonName", typeof(string));
    
            var referencePersonMobileNoParameter = referencePersonMobileNo != null ?
                new ObjectParameter("ReferencePersonMobileNo", referencePersonMobileNo) :
                new ObjectParameter("ReferencePersonMobileNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var extraDetailsParameter = extraDetails != null ?
                new ObjectParameter("ExtraDetails", extraDetails) :
                new ObjectParameter("ExtraDetails", typeof(string));
    
            var tINNoParameter = tINNo != null ?
                new ObjectParameter("TINNo", tINNo) :
                new ObjectParameter("TINNo", typeof(string));
    
            var tINDateParameter = tINDate.HasValue ?
                new ObjectParameter("TINDate", tINDate) :
                new ObjectParameter("TINDate", typeof(System.DateTime));
    
            var pANNOParameter = pANNO != null ?
                new ObjectParameter("PANNO", pANNO) :
                new ObjectParameter("PANNO", typeof(string));
    
            var cSTTINNoParameter = cSTTINNo != null ?
                new ObjectParameter("CSTTINNo", cSTTINNo) :
                new ObjectParameter("CSTTINNo", typeof(string));
    
            var cSTDateParameter = cSTDate.HasValue ?
                new ObjectParameter("CSTDate", cSTDate) :
                new ObjectParameter("CSTDate", typeof(System.DateTime));
    
            var eCCNoParameter = eCCNo != null ?
                new ObjectParameter("ECCNo", eCCNo) :
                new ObjectParameter("ECCNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByeParameter = createBye.HasValue ?
                new ObjectParameter("CreateBye", createBye) :
                new ObjectParameter("CreateBye", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblPartysMST_INSERT", companyCodeParameter, partyNameParameter, contactPersonNameParameter, officeAddressParameter, shippingAddressParameter, cityParameter, stateParameter, mobileNoParameter, phoneNoParameter, sMSNoParameter, referencePersonNameParameter, referencePersonMobileNoParameter, emailIDParameter, extraDetailsParameter, tINNoParameter, tINDateParameter, pANNOParameter, cSTTINNoParameter, cSTDateParameter, eCCNoParameter, isActiveParameter, createByeParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblPartysMST_LOAD_ALL_Result> tblPartysMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPartysMST_LOAD_ALL_Result>("tblPartysMST_LOAD_ALL");
        }
    
        public virtual int tblPartysMST_UPDATE(Nullable<long> partyID, Nullable<int> companyCode, string partyName, string contactPersonName, string officeAddress, string shippingAddress, string city, string state, string mobileNo, string phoneNo, string sMSNo, string referencePersonName, string referencePersonMobileNo, string emailID, string extraDetails, string tINNo, Nullable<System.DateTime> tINDate, string pANNO, string cSTTINNo, Nullable<System.DateTime> cSTDate, string eCCNo, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTIme)
        {
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(long));
    
            var companyCodeParameter = companyCode.HasValue ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var officeAddressParameter = officeAddress != null ?
                new ObjectParameter("OfficeAddress", officeAddress) :
                new ObjectParameter("OfficeAddress", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var sMSNoParameter = sMSNo != null ?
                new ObjectParameter("SMSNo", sMSNo) :
                new ObjectParameter("SMSNo", typeof(string));
    
            var referencePersonNameParameter = referencePersonName != null ?
                new ObjectParameter("ReferencePersonName", referencePersonName) :
                new ObjectParameter("ReferencePersonName", typeof(string));
    
            var referencePersonMobileNoParameter = referencePersonMobileNo != null ?
                new ObjectParameter("ReferencePersonMobileNo", referencePersonMobileNo) :
                new ObjectParameter("ReferencePersonMobileNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var extraDetailsParameter = extraDetails != null ?
                new ObjectParameter("ExtraDetails", extraDetails) :
                new ObjectParameter("ExtraDetails", typeof(string));
    
            var tINNoParameter = tINNo != null ?
                new ObjectParameter("TINNo", tINNo) :
                new ObjectParameter("TINNo", typeof(string));
    
            var tINDateParameter = tINDate.HasValue ?
                new ObjectParameter("TINDate", tINDate) :
                new ObjectParameter("TINDate", typeof(System.DateTime));
    
            var pANNOParameter = pANNO != null ?
                new ObjectParameter("PANNO", pANNO) :
                new ObjectParameter("PANNO", typeof(string));
    
            var cSTTINNoParameter = cSTTINNo != null ?
                new ObjectParameter("CSTTINNo", cSTTINNo) :
                new ObjectParameter("CSTTINNo", typeof(string));
    
            var cSTDateParameter = cSTDate.HasValue ?
                new ObjectParameter("CSTDate", cSTDate) :
                new ObjectParameter("CSTDate", typeof(System.DateTime));
    
            var eCCNoParameter = eCCNo != null ?
                new ObjectParameter("ECCNo", eCCNo) :
                new ObjectParameter("ECCNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTImeParameter = updationDateTIme.HasValue ?
                new ObjectParameter("UpdationDateTIme", updationDateTIme) :
                new ObjectParameter("UpdationDateTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblPartysMST_UPDATE", partyIDParameter, companyCodeParameter, partyNameParameter, contactPersonNameParameter, officeAddressParameter, shippingAddressParameter, cityParameter, stateParameter, mobileNoParameter, phoneNoParameter, sMSNoParameter, referencePersonNameParameter, referencePersonMobileNoParameter, emailIDParameter, extraDetailsParameter, tINNoParameter, tINDateParameter, pANNOParameter, cSTTINNoParameter, cSTDateParameter, eCCNoParameter, isActiveParameter, updateByParameter, updationDateTImeParameter);
        }
    
        public virtual ObjectResult<tblPenaltyMST_BY_ID_LOAD_Result> tblPenaltyMST_BY_ID_LOAD(Nullable<long> penaltyID)
        {
            var penaltyIDParameter = penaltyID.HasValue ?
                new ObjectParameter("PenaltyID", penaltyID) :
                new ObjectParameter("PenaltyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPenaltyMST_BY_ID_LOAD_Result>("tblPenaltyMST_BY_ID_LOAD", penaltyIDParameter);
        }
    
        public virtual int tblPenaltyMST_DELETE(Nullable<long> penaltyID)
        {
            var penaltyIDParameter = penaltyID.HasValue ?
                new ObjectParameter("PenaltyID", penaltyID) :
                new ObjectParameter("PenaltyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblPenaltyMST_DELETE", penaltyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblPenaltyMST_INSERT(string penaltyCode, string penaltyName, string description, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var penaltyCodeParameter = penaltyCode != null ?
                new ObjectParameter("PenaltyCode", penaltyCode) :
                new ObjectParameter("PenaltyCode", typeof(string));
    
            var penaltyNameParameter = penaltyName != null ?
                new ObjectParameter("PenaltyName", penaltyName) :
                new ObjectParameter("PenaltyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblPenaltyMST_INSERT", penaltyCodeParameter, penaltyNameParameter, descriptionParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblPenaltyMST_LOAD_ALL_Result> tblPenaltyMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPenaltyMST_LOAD_ALL_Result>("tblPenaltyMST_LOAD_ALL");
        }
    
        public virtual int tblPenaltyMST_UPDATE(Nullable<long> penaltyID, string penaltyCode, string penaltyName, string description, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var penaltyIDParameter = penaltyID.HasValue ?
                new ObjectParameter("PenaltyID", penaltyID) :
                new ObjectParameter("PenaltyID", typeof(long));
    
            var penaltyCodeParameter = penaltyCode != null ?
                new ObjectParameter("PenaltyCode", penaltyCode) :
                new ObjectParameter("PenaltyCode", typeof(string));
    
            var penaltyNameParameter = penaltyName != null ?
                new ObjectParameter("PenaltyName", penaltyName) :
                new ObjectParameter("PenaltyName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblPenaltyMST_UPDATE", penaltyIDParameter, penaltyCodeParameter, penaltyNameParameter, descriptionParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblSalaryMST_BY_ID_LOAD_Result> tblSalaryMST_BY_ID_LOAD(Nullable<int> salaryID)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblSalaryMST_BY_ID_LOAD_Result>("tblSalaryMST_BY_ID_LOAD", salaryIDParameter);
        }
    
        public virtual int tblSalaryMST_DELETE(Nullable<int> salaryID)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblSalaryMST_DELETE", salaryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblSalaryMST_INSERT(Nullable<long> employeeID, Nullable<System.DateTime> date, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<double> workedHours, Nullable<double> totalPenalty, Nullable<double> bonus, Nullable<double> withdrownAmount, Nullable<long> withdrownID, Nullable<double> netSalary, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var workedHoursParameter = workedHours.HasValue ?
                new ObjectParameter("WorkedHours", workedHours) :
                new ObjectParameter("WorkedHours", typeof(double));
    
            var totalPenaltyParameter = totalPenalty.HasValue ?
                new ObjectParameter("TotalPenalty", totalPenalty) :
                new ObjectParameter("TotalPenalty", typeof(double));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(double));
    
            var withdrownAmountParameter = withdrownAmount.HasValue ?
                new ObjectParameter("WithdrownAmount", withdrownAmount) :
                new ObjectParameter("WithdrownAmount", typeof(double));
    
            var withdrownIDParameter = withdrownID.HasValue ?
                new ObjectParameter("WithdrownID", withdrownID) :
                new ObjectParameter("WithdrownID", typeof(long));
    
            var netSalaryParameter = netSalary.HasValue ?
                new ObjectParameter("NetSalary", netSalary) :
                new ObjectParameter("NetSalary", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblSalaryMST_INSERT", employeeIDParameter, dateParameter, startDateParameter, endDateParameter, workedHoursParameter, totalPenaltyParameter, bonusParameter, withdrownAmountParameter, withdrownIDParameter, netSalaryParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblSalaryMST_LOAD_ALL_Result> tblSalaryMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblSalaryMST_LOAD_ALL_Result>("tblSalaryMST_LOAD_ALL");
        }
    
        public virtual int tblSalaryMST_UPDATE(Nullable<int> salaryID, Nullable<long> employeeID, Nullable<System.DateTime> date, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<double> workedHours, Nullable<double> totalPenalty, Nullable<double> bonus, Nullable<double> withdrownAmount, Nullable<long> withdrownID, Nullable<double> netSalary, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var workedHoursParameter = workedHours.HasValue ?
                new ObjectParameter("WorkedHours", workedHours) :
                new ObjectParameter("WorkedHours", typeof(double));
    
            var totalPenaltyParameter = totalPenalty.HasValue ?
                new ObjectParameter("TotalPenalty", totalPenalty) :
                new ObjectParameter("TotalPenalty", typeof(double));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(double));
    
            var withdrownAmountParameter = withdrownAmount.HasValue ?
                new ObjectParameter("WithdrownAmount", withdrownAmount) :
                new ObjectParameter("WithdrownAmount", typeof(double));
    
            var withdrownIDParameter = withdrownID.HasValue ?
                new ObjectParameter("WithdrownID", withdrownID) :
                new ObjectParameter("WithdrownID", typeof(long));
    
            var netSalaryParameter = netSalary.HasValue ?
                new ObjectParameter("NetSalary", netSalary) :
                new ObjectParameter("NetSalary", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblSalaryMST_UPDATE", salaryIDParameter, employeeIDParameter, dateParameter, startDateParameter, endDateParameter, workedHoursParameter, totalPenaltyParameter, bonusParameter, withdrownAmountParameter, withdrownIDParameter, netSalaryParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblTFOProcess_BY_ID_LOAD_Result> tblTFOProcess_BY_ID_LOAD(Nullable<long> tFORoleProcessId)
        {
            var tFORoleProcessIdParameter = tFORoleProcessId.HasValue ?
                new ObjectParameter("TFORoleProcessId", tFORoleProcessId) :
                new ObjectParameter("TFORoleProcessId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblTFOProcess_BY_ID_LOAD_Result>("tblTFOProcess_BY_ID_LOAD", tFORoleProcessIdParameter);
        }
    
        public virtual int tblTFOProcess_DELETE(Nullable<long> tFORoleProcessId)
        {
            var tFORoleProcessIdParameter = tFORoleProcessId.HasValue ?
                new ObjectParameter("TFORoleProcessId", tFORoleProcessId) :
                new ObjectParameter("TFORoleProcessId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblTFOProcess_DELETE", tFORoleProcessIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblTFOProcess_INSERT(Nullable<int> windingProcessId, Nullable<int> purchaseItemID, Nullable<int> machineId, Nullable<int> employeeId, string shift, Nullable<System.DateTime> startDateTime, Nullable<int> issueNoOfCopes, Nullable<double> issueWights, Nullable<double> noofTFORole, Nullable<int> producttionNoOfTFORoles, Nullable<double> producttionWights, string qualityName, Nullable<System.DateTime> endDateTime, Nullable<int> yarnQualityId, Nullable<int> yarnTypeId, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTIme)
        {
            var windingProcessIdParameter = windingProcessId.HasValue ?
                new ObjectParameter("WindingProcessId", windingProcessId) :
                new ObjectParameter("WindingProcessId", typeof(int));
    
            var purchaseItemIDParameter = purchaseItemID.HasValue ?
                new ObjectParameter("PurchaseItemID", purchaseItemID) :
                new ObjectParameter("PurchaseItemID", typeof(int));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var issueNoOfCopesParameter = issueNoOfCopes.HasValue ?
                new ObjectParameter("IssueNoOfCopes", issueNoOfCopes) :
                new ObjectParameter("IssueNoOfCopes", typeof(int));
    
            var issueWightsParameter = issueWights.HasValue ?
                new ObjectParameter("IssueWights", issueWights) :
                new ObjectParameter("IssueWights", typeof(double));
    
            var noofTFORoleParameter = noofTFORole.HasValue ?
                new ObjectParameter("NoofTFORole", noofTFORole) :
                new ObjectParameter("NoofTFORole", typeof(double));
    
            var producttionNoOfTFORolesParameter = producttionNoOfTFORoles.HasValue ?
                new ObjectParameter("ProducttionNoOfTFORoles", producttionNoOfTFORoles) :
                new ObjectParameter("ProducttionNoOfTFORoles", typeof(int));
    
            var producttionWightsParameter = producttionWights.HasValue ?
                new ObjectParameter("ProducttionWights", producttionWights) :
                new ObjectParameter("ProducttionWights", typeof(double));
    
            var qualityNameParameter = qualityName != null ?
                new ObjectParameter("QualityName", qualityName) :
                new ObjectParameter("QualityName", typeof(string));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var yarnQualityIdParameter = yarnQualityId.HasValue ?
                new ObjectParameter("YarnQualityId", yarnQualityId) :
                new ObjectParameter("YarnQualityId", typeof(int));
    
            var yarnTypeIdParameter = yarnTypeId.HasValue ?
                new ObjectParameter("YarnTypeId", yarnTypeId) :
                new ObjectParameter("YarnTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTImeParameter = creationDateTIme.HasValue ?
                new ObjectParameter("CreationDateTIme", creationDateTIme) :
                new ObjectParameter("CreationDateTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblTFOProcess_INSERT", windingProcessIdParameter, purchaseItemIDParameter, machineIdParameter, employeeIdParameter, shiftParameter, startDateTimeParameter, issueNoOfCopesParameter, issueWightsParameter, noofTFORoleParameter, producttionNoOfTFORolesParameter, producttionWightsParameter, qualityNameParameter, endDateTimeParameter, yarnQualityIdParameter, yarnTypeIdParameter, isActiveParameter, createByParameter, creationDateTImeParameter);
        }
    
        public virtual ObjectResult<tblTFOProcess_LOAD_ALL_Result> tblTFOProcess_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblTFOProcess_LOAD_ALL_Result>("tblTFOProcess_LOAD_ALL");
        }
    
        public virtual int tblTFOProcess_UPDATE(Nullable<long> tFORoleProcessId, Nullable<int> windingProcessId, Nullable<int> purchaseItemID, Nullable<int> machineId, Nullable<int> employeeId, string shift, Nullable<System.DateTime> startDateTime, Nullable<int> issueNoOfCopes, Nullable<double> issueWights, Nullable<double> noofTFORole, Nullable<int> producttionNoOfTFORoles, Nullable<double> producttionWights, string qualityName, Nullable<System.DateTime> endDateTime, Nullable<int> yarnQualityId, Nullable<int> yarnTypeId, Nullable<bool> isActive, Nullable<System.DateTime> updationDateTime, Nullable<System.DateTime> creationDateTIme)
        {
            var tFORoleProcessIdParameter = tFORoleProcessId.HasValue ?
                new ObjectParameter("TFORoleProcessId", tFORoleProcessId) :
                new ObjectParameter("TFORoleProcessId", typeof(long));
    
            var windingProcessIdParameter = windingProcessId.HasValue ?
                new ObjectParameter("WindingProcessId", windingProcessId) :
                new ObjectParameter("WindingProcessId", typeof(int));
    
            var purchaseItemIDParameter = purchaseItemID.HasValue ?
                new ObjectParameter("PurchaseItemID", purchaseItemID) :
                new ObjectParameter("PurchaseItemID", typeof(int));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var issueNoOfCopesParameter = issueNoOfCopes.HasValue ?
                new ObjectParameter("IssueNoOfCopes", issueNoOfCopes) :
                new ObjectParameter("IssueNoOfCopes", typeof(int));
    
            var issueWightsParameter = issueWights.HasValue ?
                new ObjectParameter("IssueWights", issueWights) :
                new ObjectParameter("IssueWights", typeof(double));
    
            var noofTFORoleParameter = noofTFORole.HasValue ?
                new ObjectParameter("NoofTFORole", noofTFORole) :
                new ObjectParameter("NoofTFORole", typeof(double));
    
            var producttionNoOfTFORolesParameter = producttionNoOfTFORoles.HasValue ?
                new ObjectParameter("ProducttionNoOfTFORoles", producttionNoOfTFORoles) :
                new ObjectParameter("ProducttionNoOfTFORoles", typeof(int));
    
            var producttionWightsParameter = producttionWights.HasValue ?
                new ObjectParameter("ProducttionWights", producttionWights) :
                new ObjectParameter("ProducttionWights", typeof(double));
    
            var qualityNameParameter = qualityName != null ?
                new ObjectParameter("QualityName", qualityName) :
                new ObjectParameter("QualityName", typeof(string));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var yarnQualityIdParameter = yarnQualityId.HasValue ?
                new ObjectParameter("YarnQualityId", yarnQualityId) :
                new ObjectParameter("YarnQualityId", typeof(int));
    
            var yarnTypeIdParameter = yarnTypeId.HasValue ?
                new ObjectParameter("YarnTypeId", yarnTypeId) :
                new ObjectParameter("YarnTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            var creationDateTImeParameter = creationDateTIme.HasValue ?
                new ObjectParameter("CreationDateTIme", creationDateTIme) :
                new ObjectParameter("CreationDateTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblTFOProcess_UPDATE", tFORoleProcessIdParameter, windingProcessIdParameter, purchaseItemIDParameter, machineIdParameter, employeeIdParameter, shiftParameter, startDateTimeParameter, issueNoOfCopesParameter, issueWightsParameter, noofTFORoleParameter, producttionNoOfTFORolesParameter, producttionWightsParameter, qualityNameParameter, endDateTimeParameter, yarnQualityIdParameter, yarnTypeIdParameter, isActiveParameter, updationDateTimeParameter, creationDateTImeParameter);
        }
    
        public virtual ObjectResult<tblWindingWork_BY_ID_LOAD_Result> tblWindingWork_BY_ID_LOAD(Nullable<int> windingProcessId)
        {
            var windingProcessIdParameter = windingProcessId.HasValue ?
                new ObjectParameter("WindingProcessId", windingProcessId) :
                new ObjectParameter("WindingProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblWindingWork_BY_ID_LOAD_Result>("tblWindingWork_BY_ID_LOAD", windingProcessIdParameter);
        }
    
        public virtual int tblWindingWork_DELETE(Nullable<int> windingProcessId)
        {
            var windingProcessIdParameter = windingProcessId.HasValue ?
                new ObjectParameter("WindingProcessId", windingProcessId) :
                new ObjectParameter("WindingProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblWindingWork_DELETE", windingProcessIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblWindingWork_INSERT(Nullable<int> machineId, Nullable<int> employeeId, Nullable<long> puchaseItemId, string shift, Nullable<System.DateTime> startDateTime, Nullable<double> totalIssueWeight, Nullable<double> wastedWeight, Nullable<double> productionWeight, Nullable<int> noOfCopes, Nullable<System.DateTime> endDateTime, Nullable<int> yarnQualityId, Nullable<int> yarnTypeId, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTIme)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var puchaseItemIdParameter = puchaseItemId.HasValue ?
                new ObjectParameter("PuchaseItemId", puchaseItemId) :
                new ObjectParameter("PuchaseItemId", typeof(long));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var totalIssueWeightParameter = totalIssueWeight.HasValue ?
                new ObjectParameter("TotalIssueWeight", totalIssueWeight) :
                new ObjectParameter("TotalIssueWeight", typeof(double));
    
            var wastedWeightParameter = wastedWeight.HasValue ?
                new ObjectParameter("WastedWeight", wastedWeight) :
                new ObjectParameter("WastedWeight", typeof(double));
    
            var productionWeightParameter = productionWeight.HasValue ?
                new ObjectParameter("ProductionWeight", productionWeight) :
                new ObjectParameter("ProductionWeight", typeof(double));
    
            var noOfCopesParameter = noOfCopes.HasValue ?
                new ObjectParameter("NoOfCopes", noOfCopes) :
                new ObjectParameter("NoOfCopes", typeof(int));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var yarnQualityIdParameter = yarnQualityId.HasValue ?
                new ObjectParameter("YarnQualityId", yarnQualityId) :
                new ObjectParameter("YarnQualityId", typeof(int));
    
            var yarnTypeIdParameter = yarnTypeId.HasValue ?
                new ObjectParameter("YarnTypeId", yarnTypeId) :
                new ObjectParameter("YarnTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTImeParameter = creationDateTIme.HasValue ?
                new ObjectParameter("CreationDateTIme", creationDateTIme) :
                new ObjectParameter("CreationDateTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblWindingWork_INSERT", machineIdParameter, employeeIdParameter, puchaseItemIdParameter, shiftParameter, startDateTimeParameter, totalIssueWeightParameter, wastedWeightParameter, productionWeightParameter, noOfCopesParameter, endDateTimeParameter, yarnQualityIdParameter, yarnTypeIdParameter, isActiveParameter, createByParameter, creationDateTImeParameter);
        }
    
        public virtual ObjectResult<tblWindingWork_LOAD_ALL_Result> tblWindingWork_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblWindingWork_LOAD_ALL_Result>("tblWindingWork_LOAD_ALL");
        }
    
        public virtual int tblWindingWork_UPDATE(Nullable<int> windingProcessId, Nullable<int> machineId, Nullable<int> employeeId, Nullable<long> puchaseItemId, string shift, Nullable<System.DateTime> startDateTime, Nullable<double> totalIssueWeight, Nullable<double> wastedWeight, Nullable<double> productionWeight, Nullable<int> noOfCopes, Nullable<System.DateTime> endDateTime, Nullable<int> yarnQualityId, Nullable<int> yarnTypeId, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var windingProcessIdParameter = windingProcessId.HasValue ?
                new ObjectParameter("WindingProcessId", windingProcessId) :
                new ObjectParameter("WindingProcessId", typeof(int));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var puchaseItemIdParameter = puchaseItemId.HasValue ?
                new ObjectParameter("PuchaseItemId", puchaseItemId) :
                new ObjectParameter("PuchaseItemId", typeof(long));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var totalIssueWeightParameter = totalIssueWeight.HasValue ?
                new ObjectParameter("TotalIssueWeight", totalIssueWeight) :
                new ObjectParameter("TotalIssueWeight", typeof(double));
    
            var wastedWeightParameter = wastedWeight.HasValue ?
                new ObjectParameter("WastedWeight", wastedWeight) :
                new ObjectParameter("WastedWeight", typeof(double));
    
            var productionWeightParameter = productionWeight.HasValue ?
                new ObjectParameter("ProductionWeight", productionWeight) :
                new ObjectParameter("ProductionWeight", typeof(double));
    
            var noOfCopesParameter = noOfCopes.HasValue ?
                new ObjectParameter("NoOfCopes", noOfCopes) :
                new ObjectParameter("NoOfCopes", typeof(int));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var yarnQualityIdParameter = yarnQualityId.HasValue ?
                new ObjectParameter("YarnQualityId", yarnQualityId) :
                new ObjectParameter("YarnQualityId", typeof(int));
    
            var yarnTypeIdParameter = yarnTypeId.HasValue ?
                new ObjectParameter("YarnTypeId", yarnTypeId) :
                new ObjectParameter("YarnTypeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblWindingWork_UPDATE", windingProcessIdParameter, machineIdParameter, employeeIdParameter, puchaseItemIdParameter, shiftParameter, startDateTimeParameter, totalIssueWeightParameter, wastedWeightParameter, productionWeightParameter, noOfCopesParameter, endDateTimeParameter, yarnQualityIdParameter, yarnTypeIdParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblWithdrownMST_BY_ID_LOAD_Result> tblWithdrownMST_BY_ID_LOAD(Nullable<long> withdrownID)
        {
            var withdrownIDParameter = withdrownID.HasValue ?
                new ObjectParameter("WithdrownID", withdrownID) :
                new ObjectParameter("WithdrownID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblWithdrownMST_BY_ID_LOAD_Result>("tblWithdrownMST_BY_ID_LOAD", withdrownIDParameter);
        }
    
        public virtual int tblWithdrownMST_DELETE(Nullable<long> withdrownID)
        {
            var withdrownIDParameter = withdrownID.HasValue ?
                new ObjectParameter("WithdrownID", withdrownID) :
                new ObjectParameter("WithdrownID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblWithdrownMST_DELETE", withdrownIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblWithdrownMST_INSERT(Nullable<long> employeeID, string remarks, Nullable<double> withdrownAmount, Nullable<System.DateTime> withdrownDate, Nullable<System.DateTime> returnDate, Nullable<bool> iSStatus, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var withdrownAmountParameter = withdrownAmount.HasValue ?
                new ObjectParameter("WithdrownAmount", withdrownAmount) :
                new ObjectParameter("WithdrownAmount", typeof(double));
    
            var withdrownDateParameter = withdrownDate.HasValue ?
                new ObjectParameter("WithdrownDate", withdrownDate) :
                new ObjectParameter("WithdrownDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var iSStatusParameter = iSStatus.HasValue ?
                new ObjectParameter("ISStatus", iSStatus) :
                new ObjectParameter("ISStatus", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblWithdrownMST_INSERT", employeeIDParameter, remarksParameter, withdrownAmountParameter, withdrownDateParameter, returnDateParameter, iSStatusParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblWithdrownMST_LOAD_ALL_Result> tblWithdrownMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblWithdrownMST_LOAD_ALL_Result>("tblWithdrownMST_LOAD_ALL");
        }
    
        public virtual int tblWithdrownMST_UPDATE(Nullable<long> withdrownID, Nullable<long> employeeID, string remarks, Nullable<double> withdrownAmount, Nullable<System.DateTime> withdrownDate, Nullable<System.DateTime> returnDate, Nullable<bool> iSStatus, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var withdrownIDParameter = withdrownID.HasValue ?
                new ObjectParameter("WithdrownID", withdrownID) :
                new ObjectParameter("WithdrownID", typeof(long));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var withdrownAmountParameter = withdrownAmount.HasValue ?
                new ObjectParameter("WithdrownAmount", withdrownAmount) :
                new ObjectParameter("WithdrownAmount", typeof(double));
    
            var withdrownDateParameter = withdrownDate.HasValue ?
                new ObjectParameter("WithdrownDate", withdrownDate) :
                new ObjectParameter("WithdrownDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var iSStatusParameter = iSStatus.HasValue ?
                new ObjectParameter("ISStatus", iSStatus) :
                new ObjectParameter("ISStatus", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblWithdrownMST_UPDATE", withdrownIDParameter, employeeIDParameter, remarksParameter, withdrownAmountParameter, withdrownDateParameter, returnDateParameter, iSStatusParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblWorkingYear_BY_ID_LOAD_Result> tblWorkingYear_BY_ID_LOAD(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblWorkingYear_BY_ID_LOAD_Result>("tblWorkingYear_BY_ID_LOAD", yearIDParameter);
        }
    
        public virtual int tblWorkingYear_DELETE(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblWorkingYear_DELETE", yearIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblWorkingYear_INSERT(string yearName, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime)
        {
            var yearNameParameter = yearName != null ?
                new ObjectParameter("YearName", yearName) :
                new ObjectParameter("YearName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblWorkingYear_INSERT", yearNameParameter, isActiveParameter, createdByParameter, createdDateTimeParameter);
        }
    
        public virtual ObjectResult<tblWorkingYear_LOAD_ALL_Result> tblWorkingYear_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblWorkingYear_LOAD_ALL_Result>("tblWorkingYear_LOAD_ALL");
        }
    
        public virtual int tblWorkingYear_UPDATE(Nullable<int> yearID, string yearName, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDateTime)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var yearNameParameter = yearName != null ?
                new ObjectParameter("YearName", yearName) :
                new ObjectParameter("YearName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateTimeParameter = updatedDateTime.HasValue ?
                new ObjectParameter("UpdatedDateTime", updatedDateTime) :
                new ObjectParameter("UpdatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblWorkingYear_UPDATE", yearIDParameter, yearNameParameter, isActiveParameter, createdByParameter, createdDateTimeParameter, updatedByParameter, updatedDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnPackageType_BY_ID_LOAD_Result> tblYarnPackageType_BY_ID_LOAD(Nullable<long> yarnPackageTypeID)
        {
            var yarnPackageTypeIDParameter = yarnPackageTypeID.HasValue ?
                new ObjectParameter("YarnPackageTypeID", yarnPackageTypeID) :
                new ObjectParameter("YarnPackageTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnPackageType_BY_ID_LOAD_Result>("tblYarnPackageType_BY_ID_LOAD", yarnPackageTypeIDParameter);
        }
    
        public virtual int tblYarnPackageType_DELETE(Nullable<long> yarnPackageTypeID)
        {
            var yarnPackageTypeIDParameter = yarnPackageTypeID.HasValue ?
                new ObjectParameter("YarnPackageTypeID", yarnPackageTypeID) :
                new ObjectParameter("YarnPackageTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnPackageType_DELETE", yarnPackageTypeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblYarnPackageType_INSERT(string typeName, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblYarnPackageType_INSERT", typeNameParameter, isActiveParameter, createdByParameter, createdDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnPackageType_LOAD_ALL_Result> tblYarnPackageType_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnPackageType_LOAD_ALL_Result>("tblYarnPackageType_LOAD_ALL");
        }
    
        public virtual int tblYarnPackageType_UPDATE(Nullable<long> yarnPackageTypeID, string typeName, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDateTime)
        {
            var yarnPackageTypeIDParameter = yarnPackageTypeID.HasValue ?
                new ObjectParameter("YarnPackageTypeID", yarnPackageTypeID) :
                new ObjectParameter("YarnPackageTypeID", typeof(long));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateTimeParameter = updatedDateTime.HasValue ?
                new ObjectParameter("UpdatedDateTime", updatedDateTime) :
                new ObjectParameter("UpdatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnPackageType_UPDATE", yarnPackageTypeIDParameter, typeNameParameter, isActiveParameter, updatedByParameter, updatedDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnPurchase_BY_ID_LOAD_Result> tblYarnPurchase_BY_ID_LOAD(Nullable<long> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnPurchase_BY_ID_LOAD_Result>("tblYarnPurchase_BY_ID_LOAD", purchaseIDParameter);
        }
    
        public virtual int tblYarnPurchase_DELETE(Nullable<long> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnPurchase_DELETE", purchaseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblYarnPurchase_INSERT(Nullable<long> purchaseID, Nullable<int> sRNo, Nullable<long> companyID, Nullable<long> partyID, Nullable<long> brokerID, Nullable<long> yearID, Nullable<System.DateTime> purchaseDate, string challanNo, string lRNo, string recieveAt, string grade, Nullable<int> employeeId, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDateTime)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var sRNoParameter = sRNo.HasValue ?
                new ObjectParameter("SRNo", sRNo) :
                new ObjectParameter("SRNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(long));
    
            var brokerIDParameter = brokerID.HasValue ?
                new ObjectParameter("BrokerID", brokerID) :
                new ObjectParameter("BrokerID", typeof(long));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(long));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var lRNoParameter = lRNo != null ?
                new ObjectParameter("LRNo", lRNo) :
                new ObjectParameter("LRNo", typeof(string));
    
            var recieveAtParameter = recieveAt != null ?
                new ObjectParameter("RecieveAt", recieveAt) :
                new ObjectParameter("RecieveAt", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateTimeParameter = createdDateTime.HasValue ?
                new ObjectParameter("CreatedDateTime", createdDateTime) :
                new ObjectParameter("CreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblYarnPurchase_INSERT", purchaseIDParameter, sRNoParameter, companyIDParameter, partyIDParameter, brokerIDParameter, yearIDParameter, purchaseDateParameter, challanNoParameter, lRNoParameter, recieveAtParameter, gradeParameter, employeeIdParameter, isActiveParameter, createdByParameter, createdDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnPurchase_LOAD_ALL_Result> tblYarnPurchase_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnPurchase_LOAD_ALL_Result>("tblYarnPurchase_LOAD_ALL");
        }
    
        public virtual int tblYarnPurchase_UPDATE(Nullable<long> purchaseID, Nullable<int> sRNo, Nullable<long> companyID, Nullable<long> partyID, Nullable<long> brokerID, Nullable<long> yearID, Nullable<System.DateTime> purchaseDate, string challanNo, string lRNo, string recieveAt, string grade, Nullable<int> employeeId, Nullable<bool> isActive, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDateTime)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var sRNoParameter = sRNo.HasValue ?
                new ObjectParameter("SRNo", sRNo) :
                new ObjectParameter("SRNo", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(long));
    
            var brokerIDParameter = brokerID.HasValue ?
                new ObjectParameter("BrokerID", brokerID) :
                new ObjectParameter("BrokerID", typeof(long));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(long));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var lRNoParameter = lRNo != null ?
                new ObjectParameter("LRNo", lRNo) :
                new ObjectParameter("LRNo", typeof(string));
    
            var recieveAtParameter = recieveAt != null ?
                new ObjectParameter("RecieveAt", recieveAt) :
                new ObjectParameter("RecieveAt", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateTimeParameter = updatedDateTime.HasValue ?
                new ObjectParameter("UpdatedDateTime", updatedDateTime) :
                new ObjectParameter("UpdatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnPurchase_UPDATE", purchaseIDParameter, sRNoParameter, companyIDParameter, partyIDParameter, brokerIDParameter, yearIDParameter, purchaseDateParameter, challanNoParameter, lRNoParameter, recieveAtParameter, gradeParameter, employeeIdParameter, isActiveParameter, updatedByParameter, updatedDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnPurchaseItems_BY_ID_LOAD_Result> tblYarnPurchaseItems_BY_ID_LOAD(Nullable<long> purchaseItemID)
        {
            var purchaseItemIDParameter = purchaseItemID.HasValue ?
                new ObjectParameter("PurchaseItemID", purchaseItemID) :
                new ObjectParameter("PurchaseItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnPurchaseItems_BY_ID_LOAD_Result>("tblYarnPurchaseItems_BY_ID_LOAD", purchaseItemIDParameter);
        }
    
        public virtual int tblYarnPurchaseItems_DELETE(Nullable<long> purchaseItemID)
        {
            var purchaseItemIDParameter = purchaseItemID.HasValue ?
                new ObjectParameter("PurchaseItemID", purchaseItemID) :
                new ObjectParameter("PurchaseItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnPurchaseItems_DELETE", purchaseItemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblYarnPurchaseItems_INSERT(Nullable<long> purchaseID, Nullable<long> yarnID, Nullable<long> yarnPackageTypeID, Nullable<System.DateTime> purchaseDate, string boxNo, Nullable<double> grossWeight, Nullable<double> tareWeight, Nullable<double> netWeight, Nullable<double> cheese, Nullable<long> employeeID, Nullable<long> yarnQualityID, Nullable<long> yarnTypeID, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTIme)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var yarnIDParameter = yarnID.HasValue ?
                new ObjectParameter("YarnID", yarnID) :
                new ObjectParameter("YarnID", typeof(long));
    
            var yarnPackageTypeIDParameter = yarnPackageTypeID.HasValue ?
                new ObjectParameter("YarnPackageTypeID", yarnPackageTypeID) :
                new ObjectParameter("YarnPackageTypeID", typeof(long));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var boxNoParameter = boxNo != null ?
                new ObjectParameter("BoxNo", boxNo) :
                new ObjectParameter("BoxNo", typeof(string));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(double));
    
            var tareWeightParameter = tareWeight.HasValue ?
                new ObjectParameter("TareWeight", tareWeight) :
                new ObjectParameter("TareWeight", typeof(double));
    
            var netWeightParameter = netWeight.HasValue ?
                new ObjectParameter("NetWeight", netWeight) :
                new ObjectParameter("NetWeight", typeof(double));
    
            var cheeseParameter = cheese.HasValue ?
                new ObjectParameter("Cheese", cheese) :
                new ObjectParameter("Cheese", typeof(double));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTImeParameter = creationDateTIme.HasValue ?
                new ObjectParameter("CreationDateTIme", creationDateTIme) :
                new ObjectParameter("CreationDateTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblYarnPurchaseItems_INSERT", purchaseIDParameter, yarnIDParameter, yarnPackageTypeIDParameter, purchaseDateParameter, boxNoParameter, grossWeightParameter, tareWeightParameter, netWeightParameter, cheeseParameter, employeeIDParameter, yarnQualityIDParameter, yarnTypeIDParameter, isActiveParameter, createByParameter, creationDateTImeParameter);
        }
    
        public virtual ObjectResult<tblYarnPurchaseItems_LOAD_ALL_Result> tblYarnPurchaseItems_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnPurchaseItems_LOAD_ALL_Result>("tblYarnPurchaseItems_LOAD_ALL");
        }
    
        public virtual int tblYarnPurchaseItems_UPDATE(Nullable<long> purchaseItemID, Nullable<long> purchaseID, Nullable<long> yarnID, Nullable<long> yarnPackageTypeID, Nullable<System.DateTime> purchaseDate, string boxNo, Nullable<double> grossWeight, Nullable<double> tareWeight, Nullable<double> netWeight, Nullable<double> cheese, Nullable<long> employeeID, Nullable<long> yarnQualityID, Nullable<long> yarnTypeID, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var purchaseItemIDParameter = purchaseItemID.HasValue ?
                new ObjectParameter("PurchaseItemID", purchaseItemID) :
                new ObjectParameter("PurchaseItemID", typeof(long));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var yarnIDParameter = yarnID.HasValue ?
                new ObjectParameter("YarnID", yarnID) :
                new ObjectParameter("YarnID", typeof(long));
    
            var yarnPackageTypeIDParameter = yarnPackageTypeID.HasValue ?
                new ObjectParameter("YarnPackageTypeID", yarnPackageTypeID) :
                new ObjectParameter("YarnPackageTypeID", typeof(long));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var boxNoParameter = boxNo != null ?
                new ObjectParameter("BoxNo", boxNo) :
                new ObjectParameter("BoxNo", typeof(string));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(double));
    
            var tareWeightParameter = tareWeight.HasValue ?
                new ObjectParameter("TareWeight", tareWeight) :
                new ObjectParameter("TareWeight", typeof(double));
    
            var netWeightParameter = netWeight.HasValue ?
                new ObjectParameter("NetWeight", netWeight) :
                new ObjectParameter("NetWeight", typeof(double));
    
            var cheeseParameter = cheese.HasValue ?
                new ObjectParameter("Cheese", cheese) :
                new ObjectParameter("Cheese", typeof(double));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnPurchaseItems_UPDATE", purchaseItemIDParameter, purchaseIDParameter, yarnIDParameter, yarnPackageTypeIDParameter, purchaseDateParameter, boxNoParameter, grossWeightParameter, tareWeightParameter, netWeightParameter, cheeseParameter, employeeIDParameter, yarnQualityIDParameter, yarnTypeIDParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnQualityMST_BY_ID_LOAD_Result> tblYarnQualityMST_BY_ID_LOAD(Nullable<long> yarnQualityID)
        {
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnQualityMST_BY_ID_LOAD_Result>("tblYarnQualityMST_BY_ID_LOAD", yarnQualityIDParameter);
        }
    
        public virtual int tblYarnQualityMST_DELETE(Nullable<long> yarnQualityID)
        {
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnQualityMST_DELETE", yarnQualityIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblYarnQualityMST_INSERT(string yarnQualityName, string description, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var yarnQualityNameParameter = yarnQualityName != null ?
                new ObjectParameter("YarnQualityName", yarnQualityName) :
                new ObjectParameter("YarnQualityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblYarnQualityMST_INSERT", yarnQualityNameParameter, descriptionParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnQualityMST_LOAD_ALL_Result> tblYarnQualityMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnQualityMST_LOAD_ALL_Result>("tblYarnQualityMST_LOAD_ALL");
        }
    
        public virtual int tblYarnQualityMST_UPDATE(Nullable<long> yarnQualityID, string yarnQualityName, string description, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var yarnQualityNameParameter = yarnQualityName != null ?
                new ObjectParameter("YarnQualityName", yarnQualityName) :
                new ObjectParameter("YarnQualityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnQualityMST_UPDATE", yarnQualityIDParameter, yarnQualityNameParameter, descriptionParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<tblYarnTypeMST_BY_ID_LOAD_Result> tblYarnTypeMST_BY_ID_LOAD(Nullable<long> yarnTypeID)
        {
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnTypeMST_BY_ID_LOAD_Result>("tblYarnTypeMST_BY_ID_LOAD", yarnTypeIDParameter);
        }
    
        public virtual int tblYarnTypeMST_DELETE(Nullable<long> yarnTypeID)
        {
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnTypeMST_DELETE", yarnTypeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tblYarnTypeMST_INSERT(Nullable<long> yarnTypeID, string yarnTypeName, Nullable<long> yarnQualityID, string denier, Nullable<int> numberOfFilaments, string description, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTIme)
        {
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            var yarnTypeNameParameter = yarnTypeName != null ?
                new ObjectParameter("YarnTypeName", yarnTypeName) :
                new ObjectParameter("YarnTypeName", typeof(string));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var denierParameter = denier != null ?
                new ObjectParameter("Denier", denier) :
                new ObjectParameter("Denier", typeof(string));
    
            var numberOfFilamentsParameter = numberOfFilaments.HasValue ?
                new ObjectParameter("NumberOfFilaments", numberOfFilaments) :
                new ObjectParameter("NumberOfFilaments", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTImeParameter = creationDateTIme.HasValue ?
                new ObjectParameter("CreationDateTIme", creationDateTIme) :
                new ObjectParameter("CreationDateTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tblYarnTypeMST_INSERT", yarnTypeIDParameter, yarnTypeNameParameter, yarnQualityIDParameter, denierParameter, numberOfFilamentsParameter, descriptionParameter, isActiveParameter, createByParameter, creationDateTImeParameter);
        }
    
        public virtual ObjectResult<tblYarnTypeMST_LOAD_ALL_Result> tblYarnTypeMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblYarnTypeMST_LOAD_ALL_Result>("tblYarnTypeMST_LOAD_ALL");
        }
    
        public virtual int tblYarnTypeMST_UPDATE(Nullable<long> yarnTypeID, string yarnTypeName, Nullable<long> yarnQualityID, string denier, Nullable<int> numberOfFilaments, string description, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var yarnTypeIDParameter = yarnTypeID.HasValue ?
                new ObjectParameter("YarnTypeID", yarnTypeID) :
                new ObjectParameter("YarnTypeID", typeof(long));
    
            var yarnTypeNameParameter = yarnTypeName != null ?
                new ObjectParameter("YarnTypeName", yarnTypeName) :
                new ObjectParameter("YarnTypeName", typeof(string));
    
            var yarnQualityIDParameter = yarnQualityID.HasValue ?
                new ObjectParameter("YarnQualityID", yarnQualityID) :
                new ObjectParameter("YarnQualityID", typeof(long));
    
            var denierParameter = denier != null ?
                new ObjectParameter("Denier", denier) :
                new ObjectParameter("Denier", typeof(string));
    
            var numberOfFilamentsParameter = numberOfFilaments.HasValue ?
                new ObjectParameter("NumberOfFilaments", numberOfFilaments) :
                new ObjectParameter("NumberOfFilaments", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tblYarnTypeMST_UPDATE", yarnTypeIDParameter, yarnTypeNameParameter, yarnQualityIDParameter, denierParameter, numberOfFilamentsParameter, descriptionParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    
        public virtual ObjectResult<WithdrownReturnMST_BY_ID_LOAD_Result> WithdrownReturnMST_BY_ID_LOAD(Nullable<long> withdrownReturnID)
        {
            var withdrownReturnIDParameter = withdrownReturnID.HasValue ?
                new ObjectParameter("WithdrownReturnID", withdrownReturnID) :
                new ObjectParameter("WithdrownReturnID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WithdrownReturnMST_BY_ID_LOAD_Result>("WithdrownReturnMST_BY_ID_LOAD", withdrownReturnIDParameter);
        }
    
        public virtual int WithdrownReturnMST_DELETE(Nullable<long> withdrownReturnID)
        {
            var withdrownReturnIDParameter = withdrownReturnID.HasValue ?
                new ObjectParameter("WithdrownReturnID", withdrownReturnID) :
                new ObjectParameter("WithdrownReturnID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WithdrownReturnMST_DELETE", withdrownReturnIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> WithdrownReturnMST_INSERT(Nullable<System.DateTime> date, Nullable<long> employeeID, Nullable<int> returnType, Nullable<long> salaryID, Nullable<double> amount, string remark, Nullable<bool> isActive, Nullable<int> createBy, Nullable<System.DateTime> creationDateTime)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var returnTypeParameter = returnType.HasValue ?
                new ObjectParameter("ReturnType", returnType) :
                new ObjectParameter("ReturnType", typeof(int));
    
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(int));
    
            var creationDateTimeParameter = creationDateTime.HasValue ?
                new ObjectParameter("CreationDateTime", creationDateTime) :
                new ObjectParameter("CreationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("WithdrownReturnMST_INSERT", dateParameter, employeeIDParameter, returnTypeParameter, salaryIDParameter, amountParameter, remarkParameter, isActiveParameter, createByParameter, creationDateTimeParameter);
        }
    
        public virtual ObjectResult<WithdrownReturnMST_LOAD_ALL_Result> WithdrownReturnMST_LOAD_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WithdrownReturnMST_LOAD_ALL_Result>("WithdrownReturnMST_LOAD_ALL");
        }
    
        public virtual int WithdrownReturnMST_UPDATE(Nullable<long> withdrownReturnID, Nullable<System.DateTime> date, Nullable<long> employeeID, Nullable<int> returnType, Nullable<long> salaryID, Nullable<double> amount, string remark, Nullable<bool> isActive, Nullable<int> updateBy, Nullable<System.DateTime> updationDateTime)
        {
            var withdrownReturnIDParameter = withdrownReturnID.HasValue ?
                new ObjectParameter("WithdrownReturnID", withdrownReturnID) :
                new ObjectParameter("WithdrownReturnID", typeof(long));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(long));
    
            var returnTypeParameter = returnType.HasValue ?
                new ObjectParameter("ReturnType", returnType) :
                new ObjectParameter("ReturnType", typeof(int));
    
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var updationDateTimeParameter = updationDateTime.HasValue ?
                new ObjectParameter("UpdationDateTime", updationDateTime) :
                new ObjectParameter("UpdationDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WithdrownReturnMST_UPDATE", withdrownReturnIDParameter, dateParameter, employeeIDParameter, returnTypeParameter, salaryIDParameter, amountParameter, remarkParameter, isActiveParameter, updateByParameter, updationDateTimeParameter);
        }
    }
}
