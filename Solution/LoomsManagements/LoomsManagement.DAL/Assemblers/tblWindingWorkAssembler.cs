//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-03-09 - 14:24:03
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using LoomsManagement.Domain.DTO;
using LoomsManagement.DAL.ORM;

namespace LoomsManagement.DAL
{

    /// <summary>
    /// Assembler for <see cref="tblWindingWork"/> and <see cref="tblWindingWorkDTO"/>.
    /// </summary>
    public static partial class tblWindingWorkAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="tblWindingWorkDTO"/> converted from <see cref="tblWindingWork"/>.</param>
        static partial void OnDTO(this tblWindingWork entity, tblWindingWorkDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="tblWindingWork"/> converted from <see cref="tblWindingWorkDTO"/>.</param>
        static partial void OnEntity(this tblWindingWorkDTO dto, tblWindingWork entity);

        /// <summary>
        /// Converts this instance of <see cref="tblWindingWorkDTO"/> to an instance of <see cref="tblWindingWork"/>.
        /// </summary>
        /// <param name="dto"><see cref="tblWindingWorkDTO"/> to convert.</param>
        public static tblWindingWork ToEntity(this tblWindingWorkDTO dto)
        {
            if (dto == null) return null;

            var entity = new tblWindingWork();

            entity.WindingProcessId = dto.WindingProcessId;
            entity.MachineId = dto.MachineId;
            entity.EmployeeId = dto.EmployeeId;
            entity.PuchaseItemId = dto.PuchaseItemId;
            entity.Shift = dto.Shift;
            entity.StartDateTime = dto.StartDateTime;
            entity.TotalIssueWeight = dto.TotalIssueWeight;
            entity.WastedWeight = dto.WastedWeight;
            entity.ProductionWeight = dto.ProductionWeight;
            entity.NoOfCopes = dto.NoOfCopes;
            entity.EndDateTime = dto.EndDateTime;
            entity.YarnQualityId = dto.YarnQualityId;
            entity.YarnTypeId = dto.YarnTypeId;
            entity.IsDelete = dto.IsDelete;
            entity.IsActive = dto.IsActive;
            entity.UpdateBy = dto.UpdateBy;
            entity.CreateBy = dto.CreateBy;
            entity.UpdationDateTime = dto.UpdationDateTime;
            entity.CreationDateTIme = dto.CreationDateTIme;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="tblWindingWork"/> to an instance of <see cref="tblWindingWorkDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="tblWindingWork"/> to convert.</param>
        public static tblWindingWorkDTO ToDTO(this tblWindingWork entity)
        {
            if (entity == null) return null;

            var dto = new tblWindingWorkDTO();

            dto.WindingProcessId = entity.WindingProcessId;
            dto.MachineId = entity.MachineId;
            dto.EmployeeId = entity.EmployeeId;
            dto.PuchaseItemId = entity.PuchaseItemId;
            dto.Shift = entity.Shift;
            dto.StartDateTime = entity.StartDateTime;
            dto.TotalIssueWeight = entity.TotalIssueWeight;
            dto.WastedWeight = entity.WastedWeight;
            dto.ProductionWeight = entity.ProductionWeight;
            dto.NoOfCopes = entity.NoOfCopes;
            dto.EndDateTime = entity.EndDateTime;
            dto.YarnQualityId = entity.YarnQualityId;
            dto.YarnTypeId = entity.YarnTypeId;
            dto.IsDelete = entity.IsDelete;
            dto.IsActive = entity.IsActive;
            dto.UpdateBy = entity.UpdateBy;
            dto.CreateBy = entity.CreateBy;
            dto.UpdationDateTime = entity.UpdationDateTime;
            dto.CreationDateTIme = entity.CreationDateTIme;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="tblWindingWorkDTO"/> to an instance of <see cref="tblWindingWork"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<tblWindingWork> ToEntities(this IEnumerable<tblWindingWorkDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="tblWindingWork"/> to an instance of <see cref="tblWindingWorkDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<tblWindingWorkDTO> ToDTOs(this IEnumerable<tblWindingWork> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
