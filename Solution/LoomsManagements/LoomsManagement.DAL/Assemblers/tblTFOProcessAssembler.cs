//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-03-09 - 14:24:03
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using LoomsManagement.Domain.DTO;
using LoomsManagement.DAL.ORM;

namespace LoomsManagement.DAL
{

    /// <summary>
    /// Assembler for <see cref="tblTFOProcess"/> and <see cref="tblTFOProcessDTO"/>.
    /// </summary>
    public static partial class tblTFOProcessAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="tblTFOProcessDTO"/> converted from <see cref="tblTFOProcess"/>.</param>
        static partial void OnDTO(this tblTFOProcess entity, tblTFOProcessDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="tblTFOProcess"/> converted from <see cref="tblTFOProcessDTO"/>.</param>
        static partial void OnEntity(this tblTFOProcessDTO dto, tblTFOProcess entity);

        /// <summary>
        /// Converts this instance of <see cref="tblTFOProcessDTO"/> to an instance of <see cref="tblTFOProcess"/>.
        /// </summary>
        /// <param name="dto"><see cref="tblTFOProcessDTO"/> to convert.</param>
        public static tblTFOProcess ToEntity(this tblTFOProcessDTO dto)
        {
            if (dto == null) return null;

            var entity = new tblTFOProcess();

            entity.TFORoleProcessId = dto.TFORoleProcessId;
            entity.WindingProcessId = dto.WindingProcessId;
            entity.PurchaseItemID = dto.PurchaseItemID;
            entity.MachineId = dto.MachineId;
            entity.EmployeeId = dto.EmployeeId;
            entity.Shift = dto.Shift;
            entity.StartDateTime = dto.StartDateTime;
            entity.IssueNoOfCopes = dto.IssueNoOfCopes;
            entity.IssueWights = dto.IssueWights;
            entity.NoofTFORole = dto.NoofTFORole;
            entity.ProducttionNoOfTFORoles = dto.ProducttionNoOfTFORoles;
            entity.ProducttionWights = dto.ProducttionWights;
            entity.QualityName = dto.QualityName;
            entity.EndDateTime = dto.EndDateTime;
            entity.YarnQualityId = dto.YarnQualityId;
            entity.YarnTypeId = dto.YarnTypeId;
            entity.IsDelete = dto.IsDelete;
            entity.IsActive = dto.IsActive;
            entity.UpdateBy = dto.UpdateBy;
            entity.CreateBy = dto.CreateBy;
            entity.UpdationDateTime = dto.UpdationDateTime;
            entity.CreationDateTIme = dto.CreationDateTIme;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="tblTFOProcess"/> to an instance of <see cref="tblTFOProcessDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="tblTFOProcess"/> to convert.</param>
        public static tblTFOProcessDTO ToDTO(this tblTFOProcess entity)
        {
            if (entity == null) return null;

            var dto = new tblTFOProcessDTO();

            dto.TFORoleProcessId = entity.TFORoleProcessId;
            dto.WindingProcessId = entity.WindingProcessId;
            dto.PurchaseItemID = entity.PurchaseItemID;
            dto.MachineId = entity.MachineId;
            dto.EmployeeId = entity.EmployeeId;
            dto.Shift = entity.Shift;
            dto.StartDateTime = entity.StartDateTime;
            dto.IssueNoOfCopes = entity.IssueNoOfCopes;
            dto.IssueWights = entity.IssueWights;
            dto.NoofTFORole = entity.NoofTFORole;
            dto.ProducttionNoOfTFORoles = entity.ProducttionNoOfTFORoles;
            dto.ProducttionWights = entity.ProducttionWights;
            dto.QualityName = entity.QualityName;
            dto.EndDateTime = entity.EndDateTime;
            dto.YarnQualityId = entity.YarnQualityId;
            dto.YarnTypeId = entity.YarnTypeId;
            dto.IsDelete = entity.IsDelete;
            dto.IsActive = entity.IsActive;
            dto.UpdateBy = entity.UpdateBy;
            dto.CreateBy = entity.CreateBy;
            dto.UpdationDateTime = entity.UpdationDateTime;
            dto.CreationDateTIme = entity.CreationDateTIme;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="tblTFOProcessDTO"/> to an instance of <see cref="tblTFOProcess"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<tblTFOProcess> ToEntities(this IEnumerable<tblTFOProcessDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="tblTFOProcess"/> to an instance of <see cref="tblTFOProcessDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<tblTFOProcessDTO> ToDTOs(this IEnumerable<tblTFOProcess> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
